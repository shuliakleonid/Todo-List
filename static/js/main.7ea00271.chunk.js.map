{"version":3,"sources":["Components/todo-list/todoList.module.css","constants.ts","api/api.ts","reducers/task-reducer.ts","reducers/app-reducer.ts","reducers/tl-reducer.ts","api/tl-api.ts","reducers/auth-reducer.ts","state/store.ts","pages/login/Login.tsx","pages/not-found/not-found.tsx","Components/add-item-form/AddItemForm.tsx","Components/editable-span/EditableSpan.tsx","Components/todo-list/Task.tsx","Components/todo-list/TodoList.tsx","Components/error-snackbars/ErrorSnackbar.tsx","pages/dashboard/Dashboard.tsx","Components/app/App.tsx","index.tsx"],"names":["module","exports","ACTIONS_TYPE","TaskStatuses","TaskPriorities","ResultResponseCodes","instance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","then","res","data","title","post","titleId","delete","put","todoListId","taskId","initialState","status","error","setAppStatus","type","SET_STATUS","setError","SET_ERROR","removeTaskAC","todolistId","id","REMOVE_TASK","addTaskAC","task","ADD_TASK","payload","changeTaskStatusAC","CHANGE_STATUS_TASK","setTaskAC","todoId","SET_TASK","setTask","todoID","dispatch","a","resultCode","success","item","messages","length","message","v1","addTodolistAC","ADD_TODOLIST","changeTitleTodolistAC","CHANGE_TITLE_TODOLIST","setTodoListsAC","todoLists","SET_TODOS","authAPI","r","isLoggedIn","isInitialized","setIsLoggedIn","value","SET_IS_LOGGED_IN","rootReducer","combineReducers","tasks","state","action","copyState","stateCopy","forEach","tl","todolistTask","filter","t","newTask","newTasks","todolistTasks","newTasksArray","map","CHANGE_TITLE_TASK","el","REMOVE_TODOLIST","addedDate","entityStatus","order","CHANGE_FILTER_TODOLIST","CHANGE_TODOLIST_ENTITY_STATUS","app","auth","SET_IS_INITIALIZED","store","createStore","applyMiddleware","thunk","window","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","Login","classes","useDispatch","useSelector","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","handleChange","handleSubmit","handleBlur","touched","errorEmail","errorPassword","to","Container","component","maxWidth","CssBaseline","className","Avatar","Typography","variant","TextField","onBlur","label","name","autoComplete","onChange","helperText","required","fullWidth","autoFocus","FormControlLabel","control","Checkbox","color","Button","Grid","container","xs","Link","href","NotFound","AddItemForm","React","memo","props","useState","valueTodo","setValueTodo","disabled","event","target","onKeyPress","trim","charCode","addItem","Boolean","IconButton","onClick","AddBox","EditableSpan","setTitle","editMode","setEditMode","e","currentTarget","onDoubleClick","Task","onChangeCheckbox","useCallback","newIsDoneValue","checked","changeTaskStatus","Completed","New","removeHandler","console","warn","onChangeTitleHandler","newValue","changeTaskTitle","log","ListItem","key","s","done","ListItemIcon","ListItemText","Delete","TodoList","tasksForTodoList","buttonValue","changeFilter","textContent","changeTodoListNewTitle","updateTodoList","addTask","enentityStatus","Paper","List","Alert","elevation","ErrorSnackbar","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","Dashboard","useEffect","response","todoList","items","changeStatus","getState","allAppTasks","forCurrentTodoID","currentTask","find","model","description","priority","startDate","deadline","updateStatusTask","newTitle","changeTaskTitleAC","removeTask","changeFilterTodolistAC","addTodoListClick","todolist","addTodoList","AppBar","position","LinearProgress","Toolbar","edge","aria-label","Menu","fixed","style","padding","remove","App","exact","path","render","top","textAlign","CircularProgress","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7ea00271.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"todoList_active__3oVN6\",\"done\":\"todoList_done__3zuU6\",\"error\":\"todoList_error__1Ckbf\",\"message_error\":\"todoList_message_error__2OJDR\"};","\r\nexport enum ACTIONS_TYPE {\r\n  ADD_TODOLIST = 'ADD_TODOLIST',\r\n  REMOVE_TODOLIST = 'REMOVE_TODOLIST',\r\n  CHANGE_FILTER_TODOLIST = 'CHANGE_FILTER_TODOLIST',\r\n  CHANGE_TITLE_TODOLIST = 'CHANGE_TITLE_TODOLIST',\r\n  REMOVE_TASK = 'REMOVE_TASK',\r\n  ADD_TASK = 'ADD_TASK',\r\n  CHANGE_STATUS_TASK = 'CHANGE_STATUS_TASK',\r\n  CHANGE_TITLE_TASK = 'CHANGE_TITLE_TASK',\r\n  SET_TODOS = 'SET_TODOS',\r\n  SET_TASK = 'SET_TASK',\r\n  SET_STATUS = 'SET_STATUS',\r\n  SET_ERROR = 'SET_ERROR',\r\n  CHANGE_TODOLIST_ENTITY_STATUS = 'CHANGE_TODOLIST_ENTITY_STATUS',\r\n  SET_IS_LOGGED_IN = 'SET_IS_LOGGED_IN',\r\n  SET_IS_INITIALIZED = 'SET_IS_INITIALIZED'\r\n\r\n}\r\n","import axios from 'axios';\r\n\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4\r\n}\r\nexport type TaskType = {\r\n  description: string\r\n  title: string\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n  id: string\r\n  todoListId: string\r\n  order: number\r\n  addedDate: string\r\n}\r\nexport type TodolistType = {\r\n  id: string\r\n  title: string\r\n  addedDate: string\r\n  order: number\r\n}\r\nexport type UpdateTaskModelType = {\r\n  title: string\r\n  description: string\r\n  status: number\r\n  priority: number\r\n  startDate: string\r\n  deadline: string\r\n}\r\nexport type ResponseType<T> = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  data: T\r\n}\r\ntype TasksResponse = {\r\n  error: string | null\r\n  totalCount: number\r\n  items: Array<TaskType>\r\n}\r\ntype UpdateTaskType = {\r\n  title: string\r\n  description: string\r\n  status: number\r\n  priority: number\r\n  startDate: string\r\n  deadline: string\r\n}\r\n\r\nexport const instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': '69c9d2d3-e5a4-4bb9-9356-a9517225e2b4'\r\n  }\r\n})\r\n\r\nexport const todoListsAPI = {\r\n  getTodoLists() {\r\n    return instance.get<Array<TodolistType>>('todo-lists').then(res => res.data)\r\n  },\r\n  createTodoLists(title: string) {\r\n    return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title}).then(res => res.data)\r\n  },\r\n  deleteTodoLists(titleId: string) {\r\n    return instance.delete<ResponseType<{}>>(`todo-lists/${titleId}`).then(res => res.data)\r\n  },\r\n  updateTodoLists(titleId: string, title: string) {\r\n    return instance.put<ResponseType<{}>>(`todo-lists/${titleId}`, {title}).then(res => res.data)\r\n  },\r\n  getTasks(titleId: string) {\r\n    return instance.get<TasksResponse>(`todo-lists/${titleId}/tasks`).then(res => res.data)\r\n  },\r\n  deleteTask(todoListId: string, taskId: string) {\r\n    return instance.delete<TasksResponse>(`todo-lists/${todoListId}/tasks/${taskId}`).then(res => res.data)\r\n  },\r\n  createTask(todoListId: string, title: string) {\r\n    return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todoListId}/tasks`, {title}).then(res => res.data)\r\n  },\r\n  updateTask(todoListId: string, taskId: string, title: UpdateTaskModelType) {\r\n    return instance.put<UpdateTaskType>(`todo-lists/${todoListId}/tasks/${taskId}`, {title}).then(res => res.data)\r\n  },\r\n\r\n}\r\n","import {addTodolistAC, removeTodolistAC, setTodoListsAC} from './tl-reducer';\r\nimport {ACTIONS_TYPE} from '../constants';\r\nimport {TaskStatuses, TaskType, todoListsAPI, UpdateTaskModelType} from '../api/api';\r\nimport {AppRootStateType, AppThunk} from '../state/store';\r\nimport {TasksStateType} from '../pages/dashboard/Dashboard';\r\nimport {setAppStatus, setError} from './app-reducer';\r\n\r\nexport enum ResultResponseCodes {\r\n  success = 0,\r\n  failed = 1,\r\n  captcha = 10\r\n}\r\n\r\nexport type TaskActionType =\r\n    ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof setTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof setTodoListsAC>\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: TaskActionType): TasksStateType => {\r\n  switch (action.type) {\r\n    case ACTIONS_TYPE.SET_TASK: {\r\n      const copyState = {...state}\r\n      copyState[action.payload.todoId] = action.payload.task\r\n      return copyState\r\n    }\r\n    case ACTIONS_TYPE.SET_TODOS: {\r\n      const stateCopy = {...state}\r\n      action.payload.forEach((tl) => {\r\n        stateCopy[tl.id] = []\r\n      })\r\n      return stateCopy\r\n    }\r\n    case ACTIONS_TYPE.REMOVE_TASK: {\r\n      const copyState = {...state}\r\n      const todolistTask = state[action.todolistId]\r\n      copyState[action.todolistId] = todolistTask.filter(t => t.id !== action.id)\r\n      return copyState\r\n    }\r\n    case ACTIONS_TYPE.ADD_TASK: {\r\n      const stateCopy = {...state}\r\n      const newTask = action.payload\r\n      const tasks = stateCopy[action.payload.todoListId];\r\n      const newTasks = [newTask, ...tasks];\r\n      stateCopy[action.payload.todoListId] = newTasks;\r\n      return stateCopy;\r\n    }\r\n    case ACTIONS_TYPE.CHANGE_STATUS_TASK: {\r\n      let todolistTasks = state[action.todolistId];\r\n\r\n      let newTasksArray: Array<TaskType> = todolistTasks\r\n          .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n\r\n      state[action.todolistId] = newTasksArray;\r\n      return ({...state});\r\n    }\r\n\r\n    case ACTIONS_TYPE.CHANGE_TITLE_TASK:\r\n      return {\r\n        ...state, [action.todolistId]: state[action.todolistId]\r\n            .map(el => el.id === action.id\r\n                ? {...el, title: action.title}\r\n                : {...el})\r\n\r\n      }\r\n    case ACTIONS_TYPE.ADD_TODOLIST: {\r\n      return {...state, [action.todolistId]: []}\r\n    }\r\n    case ACTIONS_TYPE.REMOVE_TODOLIST: {\r\n      const copyState = {...state}\r\n      delete copyState[action.id]\r\n      return copyState\r\n    }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const removeTaskAC = (todolistId: string, id: string) => ({\r\n  type: ACTIONS_TYPE.REMOVE_TASK,\r\n  id,\r\n  todolistId\r\n}) as const\r\nexport const addTaskAC = (task: TaskType) => ({\r\n  type: ACTIONS_TYPE.ADD_TASK, payload: task\r\n}) as const\r\nexport const changeTaskStatusAC = (status: TaskStatuses, todolistId: string, taskId: string,) => ({\r\n  type: ACTIONS_TYPE.CHANGE_STATUS_TASK\r\n  , status, todolistId, taskId\r\n}) as const\r\nexport const changeTaskTitleAC = (id: string, title: string, todolistId: string,) => ({\r\n  type: ACTIONS_TYPE.CHANGE_TITLE_TASK,\r\n  id,\r\n  title,\r\n  todolistId\r\n}) as const\r\nexport const setTaskAC = (task: Array<TaskType>, todoId: string) => {\r\n  return {type: ACTIONS_TYPE.SET_TASK, payload: {task, todoId}} as const\r\n}\r\n\r\n\r\nexport const fetchTaskThunk = (todoId: string): AppThunk =>\r\n    async (dispatch) => {\r\n      try {\r\n        dispatch(setAppStatus('loading'))\r\n        const tasks = await todoListsAPI.getTasks(todoId)\r\n        dispatch(setTaskAC(tasks.items, todoId))\r\n        dispatch(setAppStatus('succeeded'))\r\n\r\n      } catch (e) {\r\n        console.warn(e)\r\n      }\r\n    }\r\nexport const setRemoveTask = (todoID: string, taskId: string): AppThunk =>\r\n    async (dispatch) => {\r\n      try {\r\n        dispatch(setAppStatus('loading'))\r\n        await todoListsAPI.deleteTask(todoID, taskId)\r\n        dispatch(removeTaskAC(todoID, taskId))\r\n      } catch (e) {\r\n        console.warn(e)\r\n      }finally {\r\n        dispatch(setAppStatus('succeeded'))\r\n      }\r\n    }\r\nexport const setTask = (todoID: string, title: string): AppThunk =>\r\n    async (dispatch) => {\r\n      try {\r\n        dispatch(setAppStatus('loading'))\r\n        const task = await todoListsAPI.createTask(todoID, title)\r\n        debugger\r\n        if (task.resultCode === ResultResponseCodes.success) {\r\n          dispatch(addTaskAC((task.data.item)))\r\n        } else {\r\n          if (task.messages.length) {\r\n            dispatch(setError(task.messages[0]))\r\n          } else {\r\n            dispatch(setError('Some error occurred'))\r\n          }\r\n        }\r\n      } catch (err) {\r\n        dispatch(setError(err.message))\r\n        // console.warn(e)\r\n      } finally {\r\n        dispatch(setAppStatus('succeeded'))\r\n      }\r\n    }\r\nexport const updateStatusTask = (todoID: string, taskId: string, status: TaskStatuses): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n      const state = getState()\r\n      const allAppTasks = state.tasks\r\n      const forCurrentTodoID = allAppTasks[todoID]\r\n      const currentTask = forCurrentTodoID.find((t) => t.id === taskId)\r\n\r\n      if (currentTask) {\r\n        const model: UpdateTaskModelType = {\r\n          title: currentTask.title,\r\n          description: currentTask.description,\r\n          status: status,\r\n          priority: currentTask.priority,\r\n          startDate: currentTask.startDate,\r\n          deadline: currentTask.deadline,\r\n        }\r\n        try {\r\n          dispatch(setAppStatus('loading'))\r\n          await todoListsAPI.updateTask(todoID, taskId, model)\r\n          dispatch(changeTaskStatusAC(status, todoID, taskId))\r\n          dispatch(setAppStatus('succeeded'))\r\n        } catch (e) {\r\n          console.warn(e)\r\n        }\r\n      }\r\n    }\r\n","import {ACTIONS_TYPE} from '../constants';\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type AppActionType = ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setError>\r\n\r\n\r\nconst initialState = {\r\n  status: 'loading' as RequestStatusType,\r\n  error:  null as null | string\r\n}\r\n\r\nexport type AppStateType = typeof initialState\r\n\r\nexport const appReducer = (state: AppStateType = initialState, action: AppActionType): AppStateType => {\r\n  switch (action.type) {\r\n    case ACTIONS_TYPE.SET_STATUS: {\r\n      return {...state, status: action.status}\r\n    }\r\n    case ACTIONS_TYPE.SET_ERROR: {\r\n      return {...state, error: action.error}\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const setAppStatus = (status: RequestStatusType) => ({type: ACTIONS_TYPE.SET_STATUS, status}) as const\r\nexport const setError = (error: string | null) => ({type: ACTIONS_TYPE.SET_ERROR, error}) as const\r\n//\r\n//\r\n// export const fetchTaskThunk = (todoId: string): AppThunk =>\r\n//     async (dispatch) => {\r\n//       try {\r\n//\r\n//         const tasks = await todoListsAPI.getTasks(todoId)\r\n//         dispatch(setTaskAC(tasks.items, todoId))\r\n//       } catch (e) {\r\n//         console.warn(e)\r\n//       }\r\n//     }\r\n","import {v1} from 'uuid';\r\nimport {ACTIONS_TYPE} from '../constants';\r\nimport {AppThunk} from '../state/store';\r\nimport {todoListsAPI, TodolistType} from '../api/api';\r\nimport {RequestStatusType, setAppStatus, setError} from './app-reducer';\r\nimport {fetchTaskThunk} from './task-reducer';\r\n\r\nexport type TodoListActionType =\r\n    ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof setTodoListsAC>\r\n    | ReturnType<typeof changeFilterTodolistAC>\r\n    | ReturnType<typeof changeTitleTodolistAC>\r\n    | ReturnType<typeof changeTodolistEntityStatus>\r\n\r\nexport const todoListID1 = v1() // original id\r\nexport const todoListID2 = v1()\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n  filter: FilterValuesType\r\n  entityStatus: RequestStatusType\r\n}\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todoListReducer = (state = initialState, action: TodoListActionType): Array<TodolistDomainType> => {\r\n  switch (action.type) {\r\n    case ACTIONS_TYPE.ADD_TODOLIST: {\r\n      return [{\r\n        id: action.todolistId,\r\n        title: action.title,\r\n        filter: 'all',\r\n        addedDate: '',\r\n        entityStatus: 'idle',\r\n        order: 0 // порядок листа в очереди\r\n      }, ...state]\r\n    }\r\n    case ACTIONS_TYPE.REMOVE_TODOLIST:\r\n      return state.filter((item) => item.id !== action.id)\r\n    case ACTIONS_TYPE.CHANGE_FILTER_TODOLIST:\r\n      return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\r\n    case ACTIONS_TYPE.CHANGE_TITLE_TODOLIST:\r\n      return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl)\r\n    case ACTIONS_TYPE.SET_TODOS: {\r\n      return action.payload.map((tl) => ({...tl, filter: 'all', entityStatus: 'idle',}))\r\n    }\r\n    case ACTIONS_TYPE.CHANGE_TODOLIST_ENTITY_STATUS: {\r\n      return state.map(tl => tl.id === action.todoListId ? {...tl, entityStatus:action.status} : tl)\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\nexport const removeTodolistAC = (todolistId: string) => ({type: ACTIONS_TYPE.REMOVE_TODOLIST, id: todolistId}) as const\r\nexport const addTodolistAC = (title: string, todolistId: string) => ({\r\n  type: ACTIONS_TYPE.ADD_TODOLIST,\r\n  title,\r\n  todolistId\r\n}) as const\r\nexport const changeFilterTodolistAC = (todolistId: string, filter: FilterValuesType) => ({\r\n  type: ACTIONS_TYPE.CHANGE_FILTER_TODOLIST,\r\n  todolistId,\r\n  filter\r\n}) as const\r\nexport const changeTitleTodolistAC = (todolistId: string, title: string) => ({\r\n  type: ACTIONS_TYPE.CHANGE_TITLE_TODOLIST,\r\n  todolistId,\r\n  title\r\n}) as const\r\nexport const setTodoListsAC = (todoLists: Array<TodolistType>) => ({\r\n  type: ACTIONS_TYPE.SET_TODOS,\r\n  payload: todoLists\r\n}) as const\r\nexport const changeTodolistEntityStatus = (todoListId:string,status:RequestStatusType) => ({type: ACTIONS_TYPE.CHANGE_TODOLIST_ENTITY_STATUS,todoListId,status}) as const\r\nexport const fetchTodoListsThunk = (): AppThunk =>\r\n    async (dispatch) => {\r\n      try {\r\n        dispatch(setAppStatus('loading'))\r\n        const todoLists = await todoListsAPI.getTodoLists()\r\n        dispatch(setTodoListsAC(todoLists))\r\n        todoLists.forEach(todoList => dispatch(fetchTaskThunk(todoList.id)))\r\n        dispatch(setAppStatus('succeeded'))\r\n      } catch (e) {\r\n        console.warn(e)\r\n      }\r\n    }\r\nexport const setRemoveTodoList = (todoID: string): AppThunk =>\r\n    async (dispatch) => {\r\n      try {\r\n        dispatch(changeTodolistEntityStatus(todoID,'loading'))\r\n        dispatch(setAppStatus('loading'))\r\n        await todoListsAPI.deleteTodoLists(todoID)\r\n        dispatch(removeTodolistAC(todoID))\r\n\r\n\r\n      } catch (e) {\r\n        console.warn(e)\r\n      }finally {\r\n        dispatch(setAppStatus('succeeded'))\r\n      }\r\n\r\n    }\r\nexport const addTodoList = (title: string): AppThunk =>\r\n    async (dispatch) => {\r\n      try {\r\n        dispatch(setAppStatus('loading'))\r\n        const todolist = await todoListsAPI.createTodoLists(title)\r\n        // dispatch(addTodolistAC(todolist.data.item.title, todolist.data.item.id))\r\n        if (todolist.resultCode === 0) {\r\n          debugger\r\n          dispatch(addTodolistAC(todolist.data.item.title, todolist.data.item.id))\r\n          // dispatch(setAppStatus('succeeded'))\r\n        } else {\r\n          if (todolist.messages.length) {\r\n            dispatch(setError(todolist.messages[0]))\r\n          } else {\r\n            dispatch(setError('Some error occurred'))\r\n          }\r\n        }\r\n      } catch (e) {\r\n        dispatch(setError(e))\r\n        // console.warn(e)\r\n      } finally {\r\n        dispatch(setAppStatus('succeeded'))\r\n      }\r\n    }\r\nexport const updateTodoList = (todoID: string, title: string): AppThunk =>\r\n    async (dispatch) => {\r\n      try {\r\n        dispatch(setAppStatus('loading'))\r\n        await todoListsAPI.updateTodoLists(todoID, title)\r\n\r\n        dispatch(changeTitleTodolistAC(todoID, title))\r\n        dispatch(setAppStatus('succeeded'))\r\n      } catch (e) {\r\n        console.warn(e)\r\n      }\r\n    }\r\n","import {instance,ResponseType} from './api'\r\n\r\nexport type LoginDataType ={\r\n  email:string\r\n  password:string\r\n  rememberMe:boolean\r\n}\r\ntype AuthType = {\r\n  id:number\r\n  email:string\r\n  login:string\r\n}\r\nexport const authAPI = {\r\n  login(data:LoginDataType) {\r\n    return instance.post<ResponseType<{}>>('auth/login',{...data}).then(r=>r.data)\r\n  },\r\n  me(){\r\n    return instance.get<ResponseType<AuthType>>('auth/me').then(r=>r.data)\r\n  },\r\n  logOut(){\r\n    return instance.delete('auth/login')\r\n  }\r\n\r\n}\r\n","import {ACTIONS_TYPE} from '../constants';\r\nimport {AppThunk} from '../state/store';\r\nimport {authAPI, LoginDataType} from '../api/tl-api';\r\nimport {setAppStatus} from './app-reducer';\r\n\r\nexport type AuthActionType =\r\n    ReturnType<typeof setIsLoggedIn>\r\n    | ReturnType<typeof setInitialized>\r\n\r\nconst initialState = {\r\n  isLoggedIn: false,\r\n  isInitialized:false\r\n};\r\nexport type AuthStateType = typeof initialState\r\nexport const authReducer = (state: AuthStateType = initialState, action: AuthActionType): AuthStateType => {\r\n  switch (action.type) {\r\n    case ACTIONS_TYPE.SET_IS_LOGGED_IN:\r\n      return {...state, isLoggedIn: action.value}\r\n    case ACTIONS_TYPE.SET_IS_INITIALIZED:\r\n      return {...state, isInitialized: action.value}\r\n    default:\r\n      return {...state}\r\n  }\r\n}\r\nexport const setIsLoggedIn = (value: boolean) => ({type: ACTIONS_TYPE.SET_IS_LOGGED_IN, value}) as const\r\nexport const setInitialized = (value: boolean) => ({type: ACTIONS_TYPE.SET_IS_INITIALIZED, value}) as const\r\nexport const login = (data: LoginDataType): AppThunk =>\r\n    async (dispatch) => {\r\n      dispatch(setAppStatus('loading'))\r\n      try {\r\n        const response = await authAPI.login(data)\r\n        if (response.resultCode === 0) {\r\n          dispatch(setIsLoggedIn(true))\r\n        }\r\n      } catch (e) {\r\n      } finally {\r\n        dispatch(setAppStatus('succeeded'))\r\n\r\n      }\r\n    }\r\n    export const initializeApp = (): AppThunk =>\r\n    async (dispatch) => {\r\n      try {\r\n        const response = await authAPI.me()\r\n        dispatch(setInitialized(true))\r\n        if (response.resultCode === 0) {\r\n          dispatch(setIsLoggedIn(true))\r\n        }\r\n      } catch (e) {\r\n      }\r\n    }\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {TaskActionType, tasksReducer} from '../reducers/task-reducer';\r\nimport {TodoListActionType, todoListReducer} from '../reducers/tl-reducer';\r\nimport thunk, {ThunkAction} from 'redux-thunk';\r\nimport {AppActionType, appReducer} from '../reducers/app-reducer';\r\nimport {AuthActionType, authReducer} from '../reducers/auth-reducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todoLists: todoListReducer,\r\n  app:appReducer,\r\n  auth:authReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// экшен для типизации санки сборка из всех экшенов из редюсоров\r\ntype ActionType = TodoListActionType | TaskActionType | AppActionType | AuthActionType\r\n//типизация санок\r\nexport type AppThunk = ThunkAction<void, AppRootStateType, unknown, ActionType>\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControlLabel, Grid, makeStyles, TextField} from '@material-ui/core'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Link from '@material-ui/core/Link';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport {useFormik} from 'formik';\r\nimport {login} from '../../reducers/auth-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../state/store';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\ntype FormikErrorType = {\r\n  email?: string\r\n  password?: string\r\n  rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n  const classes = useStyles();\r\nconst dispatch = useDispatch()\r\nconst isLoggedIn = useSelector<AppRootStateType,boolean>(state=>state.auth.isLoggedIn)\r\n\r\n  const {handleChange, handleSubmit,handleBlur, values,errors,touched,resetForm} = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false\r\n    },\r\n    validate: (values) => {\r\n      const errors: FormikErrorType = {};\r\n      if (!values.email) {\r\n        errors.email = 'Required';\r\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n      }\r\n      if(values.password.length>4){\r\n        // errors.password = 'Required';\r\n      }else {\r\n        errors.password = 'Password must be longer';\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: values => {\r\n      resetForm()\r\n      dispatch(login(values))\r\n    }\r\n  })\r\n\r\n  const errorEmail = !!(touched.email && errors.email)\r\n  const errorPassword = !!(touched.password && errors.password)\r\n\r\nif (isLoggedIn){\r\n return  <Redirect to={'/'}/>\r\n}\r\n  return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline/>\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon/>\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Log In\r\n          </Typography>\r\n          <form className={classes.form} onSubmit={handleSubmit}>\r\n            <TextField\r\n                error={errorEmail && !!errors.email}\r\n                onBlur={handleBlur}\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                onChange={handleChange}\r\n                helperText={errorEmail && errors.email}\r\n                value={values.email}\r\n                required\r\n                fullWidth\r\n                autoFocus\r\n            />\r\n            <TextField\r\n                error={errorPassword}\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                helperText={errorPassword && errors.password}\r\n                value={values.password}\r\n                required\r\n                fullWidth\r\n            />\r\n            <FormControlLabel\r\n                control={<Checkbox  name=\"rememberMe\" value={values.rememberMe} onChange={handleChange} color=\"primary\"/>}\r\n                label=\"Remember me\"\r\n            />\r\n            <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}\r\n            >\r\n              Log In\r\n            </Button>\r\n            <Grid container>\r\n              <Grid item xs>\r\n                <Link href={'https://social-network.samuraijs.com/'} variant=\"body2\">\r\n                  To log in get registered\r\n                </Link>\r\n              </Grid>\r\n              <Grid item>\r\n                <p>or use common test account credentials:</p>\r\n                <p>Email: free@samuraijs.com</p>\r\n                <p>Password: free</p>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n  return (\r\n      <div>\r\n        I`m not found!\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormType = {\r\n  addItem: (value: string) => void\r\n  disabled?: boolean\r\n}\r\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\r\n  const [valueTodo, setValueTodo] = useState('')\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setValueTodo(event.target.value)\r\n    setError(null)\r\n  }\r\n  const onClickButtonAdd = () => {\r\n    if (valueTodo.trim()) {\r\n      props.addItem(valueTodo)\r\n      setValueTodo('')\r\n    } else {\r\n      setError('Error write name!')\r\n    }\r\n  }\r\n  const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>): void => {\r\n    if (error !== null) {\r\n      setError(null);\r\n    }\r\n    const value = valueTodo.trim();\r\n    if (event.charCode === 13 && value !== '') {\r\n      props.addItem(value)\r\n      setValueTodo('')\r\n    } else {\r\n      setError('Error write name!')\r\n    }\r\n  }\r\n\r\n  return (\r\n      <div>\r\n        <TextField value={valueTodo}\r\n                   disabled={props.disabled}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   helperText={error && 'Write title'}\r\n                   label={'Title'}\r\n                   error={Boolean(error)}\r\n                   onBlur={() => {\r\n                     setError(null)\r\n                   }}\r\n        />\r\n        <IconButton onClick={onClickButtonAdd} disabled={props.disabled}>\r\n          <AddBox/>\r\n        </IconButton>\r\n      </div>\r\n  )\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpanTypeProps = {\r\n  title: string\r\nonChange:(value:string)=>void\r\n}\r\nexport const EditableSpan = React.memo((props: EditableSpanTypeProps) => {\r\n  const [title, setTitle] = useState('')\r\n  const [editMode, setEditMode] = useState(false)\r\n  const activateEditMode = () => {\r\n    setEditMode(true)\r\n    setTitle(props.title)\r\n  }\r\n  const activateViewMode = () => {\r\n    props.onChange(title)\r\n    setEditMode(false)\r\n  }\r\n  const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n  return (editMode\r\n          ? <TextField onChange={onChangeTitleHandler} onBlur={activateViewMode} value={title} autoFocus/>\r\n          : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n  )\r\n})\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton, ListItem, ListItemIcon, ListItemText} from '@material-ui/core';\r\nimport s from './todoList.module.css';\r\nimport {EditableSpan} from '../editable-span/EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from '../../api/api';\r\nimport {useDispatch} from 'react-redux';\r\nimport {setRemoveTask} from '../../reducers/task-reducer';\r\n\r\nexport type TaskPropsType = {\r\n  disabled:boolean\r\n  task: TaskType\r\n  todoListId: string\r\n  changeTaskTitle: (id: string, newValue: string, todoListId: string) => void\r\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const onChangeCheckbox = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    let newIsDoneValue = e.currentTarget.checked\r\n    props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId)\r\n  }, [props]);\r\n\r\n  const removeHandler = useCallback(() => dispatch(setRemoveTask(props.todoListId, props.task.id)), [props.todoListId, props.task.id,dispatch]);\r\n\r\n  const onChangeTitleHandler = useCallback((newValue: string) => {\r\n    props.changeTaskTitle(props.task.id, newValue, props.todoListId)\r\n  }, [props]);\r\n\r\n  console.log(props.disabled)\r\n  return (\r\n      <ListItem key={props.task.id} className={props.task.status === TaskStatuses.Completed ? s.done : ''}>\r\n        <ListItemIcon>\r\n          <Checkbox color={'primary'}\r\n                    checked={props.task.status === TaskStatuses.Completed}\r\n                    onChange={onChangeCheckbox}/>\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          <EditableSpan title={props.task.title} onChange={onChangeTitleHandler}/>\r\n        </ListItemText>\r\n        <IconButton onClick={removeHandler} disabled={props.disabled}>\r\n          <Delete/>\r\n        </IconButton>\r\n      </ListItem>\r\n  )\r\n})\r\n","import React, {useCallback} from 'react';\r\nimport {AddItemForm} from '../add-item-form/AddItemForm';\r\nimport {EditableSpan} from '../editable-span/EditableSpan';\r\nimport {Button, IconButton, List, Paper} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './Task';\r\nimport {v1} from 'uuid';\r\nimport {TaskStatuses, TaskType} from '../../api/api';\r\nimport {useDispatch} from 'react-redux';\r\nimport {FilterValuesType, setRemoveTodoList, updateTodoList} from '../../reducers/tl-reducer';\r\nimport {setTask} from '../../reducers/task-reducer';\r\nimport {RequestStatusType} from '../../reducers/app-reducer';\r\n\r\ntype TodoListPropsType = {\r\n  id: string\r\n  title: string\r\n  tasks: Array<TaskType>\r\n  filter: FilterValuesType\r\n  enentityStatus: RequestStatusType\r\n  remove: (id: string, todoListId: string) => void\r\n  addTask: (value: string, todoListId: string) => void\r\n  changeTodoListNewTitle: (id: string, newTitle: string) => void\r\n  changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n  changeTaskTitle: (id: string, newValue: string, todoListId: string) => void\r\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n}\r\n\r\nconst TodoList = React.memo((props: TodoListPropsType) => {\r\n  const dispatch = useDispatch()\r\n  let tasksForTodoList = props.tasks\r\n  if (props.filter === 'active') {\r\n    tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n  }\r\n  if (props.filter === 'completed') {\r\n    tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n  }\r\n  const buttonValue = useCallback((event: any) => {\r\n    props.changeFilter(event.currentTarget.textContent, props.id)\r\n  }, [props])\r\n  const changeTodoListNewTitle = useCallback((title: string) => {\r\n    dispatch(updateTodoList(props.id, title))\r\n  }, [props.id, dispatch])\r\n  const addTask = useCallback((title: string) => {\r\n    dispatch(setTask(props.id, title))\r\n  }, [props.id, dispatch])\r\n  const removeTodolist = () => {\r\n    dispatch(setRemoveTodoList(props.id))\r\n  }\r\n  const tasks = tasksForTodoList.map(task => <Task\r\n      disabled={props.enentityStatus === 'loading'}\r\n      key={v1()}\r\n      task={task}\r\n      todoListId={props.id}\r\n      changeTaskStatus={props.changeTaskStatus}\r\n      changeTaskTitle={props.changeTaskTitle}\r\n  />)\r\n  return (\r\n      <Paper>\r\n        <List>\r\n          <h3>\r\n            <EditableSpan title={props.title} onChange={changeTodoListNewTitle}/>\r\n            <IconButton\r\n                onClick={removeTodolist}\r\n                disabled={props.enentityStatus === 'loading'}>\r\n              <Delete/>\r\n            </IconButton>\r\n          </h3>\r\n          <AddItemForm addItem={addTask} disabled={props.enentityStatus === 'loading'}/>\r\n          <ul>\r\n            {tasks}\r\n          </ul>\r\n          <Button variant=\"contained\"\r\n                  color={props.filter === 'all' ? 'secondary' : 'primary'}\r\n                  onClick={buttonValue}>all</Button>\r\n          <Button variant=\"contained\"\r\n                  color={props.filter === 'active' ? 'secondary' : 'primary'}\r\n                  onClick={buttonValue}>active</Button>\r\n          <Button variant=\"contained\"\r\n                  color={props.filter === 'completed' ? 'secondary' : 'primary'}\r\n                  onClick={buttonValue}>completed</Button>\r\n        </List> </Paper>\r\n  )\r\n})\r\nexport default TodoList;\r\n\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../state/store';\r\nimport {setError} from '../../reducers/app-reducer';\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport const ErrorSnackbar = () => {\r\n  // const [open, setOpen] = React.useState(true)\r\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n  const dispatch = useDispatch()\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) =>\r\n      dispatch(setError(null))\r\n  // debugger\r\n\r\n  // if (reason === 'clickaway') {\r\n  //   setOpen(false)\r\n  //   return\r\n  // }\r\n  // setOpen(false)\r\n\r\n\r\n  return (\r\n      <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\">\r\n          {error}\r\n        </Alert>\r\n      </Snackbar>\r\n  )\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport TodoList from '../../Components/todo-list/TodoList';\r\nimport {AddItemForm} from '../../Components/add-item-form/AddItemForm';\r\nimport {\r\n  AppBar,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  IconButton,\r\n  LinearProgress,\r\n  Paper,\r\n  Toolbar,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n  addTodoList,\r\n  changeFilterTodolistAC,\r\n  changeTitleTodolistAC,\r\n  fetchTodoListsThunk,\r\n  FilterValuesType,\r\n  TodolistDomainType\r\n} from '../../reducers/tl-reducer';\r\nimport {changeTaskTitleAC, removeTaskAC, setTask, updateStatusTask} from '../../reducers/task-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../state/store';\r\nimport {TaskStatuses, TaskType} from '../../api/api';\r\nimport {AppStateType} from '../../reducers/app-reducer';\r\nimport {ErrorSnackbar} from '../../Components/error-snackbars/ErrorSnackbar';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport {AuthStateType, initializeApp, setIsLoggedIn} from '../../reducers/auth-reducer';\r\n\r\nexport type TasksStateType = { [key: string]: Array<TaskType> }\r\n\r\nexport const Dashboard = () => {\r\n  const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todoLists)\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n  const {status} = useSelector<AppRootStateType, AppStateType>(state => state.app)\r\n  const {isLoggedIn } = useSelector<AppRootStateType, AuthStateType>(state => state.auth)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(initializeApp())\r\n    dispatch(fetchTodoListsThunk())\r\n    if (!isLoggedIn) {\r\n      return\r\n    }\r\n  }, [dispatch,isLoggedIn])\r\n\r\n  const changeTodoListNewTitle = useCallback((todolistId: string, title: string) => {\r\n    dispatch(changeTitleTodolistAC(todolistId, title))\r\n  }, [dispatch])\r\n\r\n\r\n  const addTask = useCallback((title: string, todoListId: string): void => {\r\n    dispatch(setTask(title, todoListId))\r\n  }, [dispatch])\r\n  const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string): void => {\r\n    dispatch(updateStatusTask(todolistId, id, status))\r\n  }, [dispatch])\r\n  const changeTaskTitle = useCallback((id: string, newTitle: string, todoListId: string): void => {\r\n    dispatch(changeTaskTitleAC(id, todoListId, newTitle))\r\n  }, [dispatch])\r\n  const removeTask = useCallback((id: string, todoListId: string) => {\r\n    dispatch(removeTaskAC(id, todoListId))\r\n  }, [dispatch])\r\n  const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n    dispatch(changeFilterTodolistAC(todolistId, value))\r\n  }, [dispatch])\r\n  const addTodoListClick = useCallback((title: string) => {\r\n    dispatch(addTodoList(title))\r\n  }, [dispatch])\r\n\r\n  const handleLogOut = () => {\r\n    dispatch(setIsLoggedIn(false))\r\n  }\r\n\r\n  if (!isLoggedIn) {\r\n    return <Redirect to={'/login'}/>\r\n  }\r\n  // if (!isInitialized) {\r\n  //   return <div\r\n  //       style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n  //     <CircularProgress/>\r\n  //   </div>\r\n  // }\r\n\r\n  return (\r\n      <div className=\"App\">\r\n        <ErrorSnackbar/>\r\n        <AppBar position=\"static\">\r\n          {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n              <Menu/>\r\n            </IconButton>\r\n            <Typography variant=\"h3\">\r\n              Todo\r\n            </Typography>\r\n            <Button onClick={handleLogOut} color=\"inherit\"><NavLink to=\"/login\">Login</NavLink></Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Container fixed>\r\n          <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodoListClick}/>\r\n          </Grid>\r\n          <Grid container spacing={10}>\r\n            {\r\n              todoLists.map((t) => {\r\n                let tasksForTodoList = tasks[t.id]\r\n                return (\r\n                    <Grid item key={t.id}>\r\n                      <Paper>\r\n                        <TodoList\r\n                            id={t.id}\r\n                            title={t.title}\r\n                            filter={t.filter}\r\n                            enentityStatus={t.entityStatus}\r\n                            addTask={addTask}\r\n                            remove={removeTask}\r\n                            tasks={tasksForTodoList}\r\n                            changeFilter={changeFilter}\r\n                            changeTaskStatus={changeStatus}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodoListNewTitle={changeTodoListNewTitle}\r\n                        />\r\n                      </Paper>\r\n                    </Grid>\r\n                )\r\n              })\r\n            }\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n  )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport {Login} from '../../pages/login/Login';\r\nimport NotFound from '../../pages/not-found/not-found';\r\nimport {Dashboard} from '../../pages/dashboard/Dashboard'\r\nimport {CircularProgress} from '@material-ui/core';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../state/store';\r\nimport {AuthStateType} from '../../reducers/auth-reducer';\r\n\r\n\r\nconst App = () => {\r\n  const {isInitialized} = useSelector<AppRootStateType, AuthStateType>(state => state.auth)\r\n  if (!isInitialized) {\r\n    return <div\r\n        style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n      <CircularProgress/>\r\n    </div>\r\n  }\r\n  return (\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path={'/'} render={() => <Dashboard/>}/>\r\n          <Route path={'/Todo-List'} render={() => <Dashboard/>}/>\r\n          <Route path={'/login'} render={() => <Login/>}/>\r\n          <Route  render={() => <NotFound/>}/>\r\n        </Switch>\r\n      </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store'\r\nimport App from './Components/app/App';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <App/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}
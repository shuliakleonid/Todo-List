{"version":3,"sources":["api/api.ts","Components/add-item-form/AddItemForm.tsx","Components/editable-span/EditableSpan.tsx","constants.ts","reducers/task-reducer.ts","Components/todo-list/Task.tsx","reducers/tl-reducer.ts","Components/todo-list/TodoList.tsx","Components/app-withReducer/AppWithReducers.tsx","state/store.ts","index.tsx","Components/todo-list/todoList.module.css"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","valueTodo","setValueTodo","error","setError","TextField","value","onChange","event","target","onKeyPress","trim","charCode","addItem","helperText","label","Boolean","onBlur","IconButton","onClick","AddBox","EditableSpan","title","setTitle","editMode","setEditMode","e","currentTarget","autoFocus","onDoubleClick","ACTIONS_TYPE","instance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","then","res","data","post","item","titleId","delete","put","todoListId","taskId","initialState","removeTaskAC","todolistId","id","type","REMOVE_TASK","addTaskAC","task","ADD_TASK","payload","changeTaskStatusAC","status","CHANGE_STATUS_TASK","setTaskAC","todoId","SET_TASK","setTask","todoID","dispatch","a","console","warn","Task","useDispatch","onChangeCheckbox","useCallback","newIsDoneValue","checked","changeTaskStatus","Completed","New","removeHandler","onChangeTitleHandler","newValue","changeTaskTitle","ListItem","key","className","s","done","ListItemIcon","Checkbox","color","ListItemText","Delete","v1","addTodolistAC","ADD_TODOLIST","changeTitleTodolistAC","CHANGE_TITLE_TODOLIST","setTodoListsAC","todoLists","SET_TODOS","TodoList","useEffect","tasks","items","tasksForTodoList","filter","t","buttonValue","changeFilter","textContent","changeTodoListNewTitle","updateTodoList","addTask","map","Paper","List","REMOVE_TODOLIST","Button","variant","AppWithReducers","useSelector","state","changeStatus","getState","allAppTasks","forCurrentTodoID","currentTask","find","model","description","priority","startDate","deadline","updateStatusTask","newTitle","CHANGE_TITLE_TASK","changeTaskTitleAC","removeTask","CHANGE_FILTER_TODOLIST","changeFilterTodolistAC","addTodoListClick","todolist","addTodoList","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","remove","rootReducer","combineReducers","action","copyState","stateCopy","forEach","tl","todolistTask","newTask","newTasks","todolistTasks","newTasksArray","el","addedDate","order","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.08235424.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4\r\n}\r\nexport type TaskType = {\r\n  description: string\r\n  title: string\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n  id: string\r\n  todoListId: string\r\n  order: number\r\n  addedDate: string\r\n}\r\nexport type TodolistType = {\r\n  id: string\r\n  title: string\r\n  addedDate: string\r\n  order: number\r\n}\r\nexport type UpdateTaskModelType = {\r\n  title: string\r\n  description: string\r\n  status: number\r\n  priority: number\r\n  startDate: string\r\n  deadline: string\r\n}\r\ntype ResponseType<T> = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  data: T\r\n}\r\ntype TasksResponse = {\r\n  error: string | null\r\n  totalCount: number\r\n  items: Array<TaskType>\r\n}\r\ntype UpdateTaskType = {\r\n  title: string\r\n  description: string\r\n  status: number\r\n  priority: number\r\n  startDate: string\r\n  deadline: string\r\n}\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': '69c9d2d3-e5a4-4bb9-9356-a9517225e2b4'\r\n  }\r\n})\r\n\r\nexport const todoListsAPI = {\r\n  getTodoLists() {\r\n    return instance.get<Array<TodolistType>>('todo-lists').then(res => res.data)\r\n  },\r\n  createTodoLists(title: string) {\r\n    return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title}).then(res => res.data.data.item)\r\n  },\r\n  deleteTodoLists(titleId: string) {\r\n    return instance.delete<ResponseType<{}>>(`todo-lists/${titleId}`).then(res => res.data)\r\n  },\r\n  updateTodoLists(titleId: string, title: string) {\r\n    return instance.put<ResponseType<{}>>(`todo-lists/${titleId}`, {title}).then(res => res.data)\r\n  },\r\n  getTasks(titleId: string) {\r\n    return instance.get<TasksResponse>(`todo-lists/${titleId}/tasks`).then(res => res.data)\r\n  },\r\n  deleteTask(todoListId: string, taskId: string) {\r\n    return instance.delete<TasksResponse>(`todo-lists/${todoListId}/tasks/${taskId}`).then(res => res.data)\r\n  },\r\n  createTask(todoListId: string, title: string) {\r\n    return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todoListId}/tasks`, {title}).then(res => res.data)\r\n  },\r\n  updateTask(todoListId: string, taskId: string, title: UpdateTaskModelType) {\r\n    return instance.put<UpdateTaskType>(`todo-lists/${todoListId}/tasks/${taskId}`, {title}).then(res => res.data)\r\n  }\r\n}\r\n","import React, {ChangeEvent,KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormType = {\r\n  addItem: (value: string) => void\r\n}\r\nexport const AddItemForm = React.memo( (props: AddItemFormType) => {\r\n  const [valueTodo, setValueTodo] = useState('')\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n\r\n  const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setValueTodo(event.target.value)\r\n    setError(null)\r\n  }\r\n  const onClickButtonAdd = () => {\r\n    if (valueTodo.trim()) {\r\n      props.addItem(valueTodo)\r\n      setValueTodo('')\r\n    } else {\r\n      setError('Error write name!')\r\n    }\r\n  }\r\n\r\n  const onKeyPressHandler = (event:KeyboardEvent<HTMLInputElement>): void => {\r\n    if(error !== null){\r\n          setError(null);\r\n    }\r\n    const value = valueTodo.trim();\r\n    if (event.charCode === 13 && value !== '') {\r\n      props.addItem(value)\r\n      setValueTodo('')\r\n    } else {\r\n      setError('Error write name!')\r\n    }\r\n  }\r\n\r\n  return (\r\n      <div>\r\n        <TextField value={valueTodo}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   helperText={error && 'Write title'}\r\n                   label={\"Title\"}\r\n                   error={Boolean(error)}\r\n                   onBlur={() => {\r\n                     setError(null)\r\n                   }}\r\n        />\r\n        <IconButton onClick={onClickButtonAdd}>\r\n          <AddBox/>\r\n        </IconButton>\r\n      </div>\r\n  )\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpanTypeProps = {\r\n  title: string\r\nonChange:(value:string)=>void\r\n}\r\nexport const EditableSpan = React.memo((props: EditableSpanTypeProps) => {\r\n  const [title, setTitle] = useState('')\r\n  const [editMode, setEditMode] = useState(false)\r\n  const activateEditMode = () => {\r\n    setEditMode(true)\r\n    setTitle(props.title)\r\n  }\r\n  const activateViewMode = () => {\r\n    props.onChange(title)\r\n    setEditMode(false)\r\n  }\r\n  const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n  return (editMode\r\n          ? <TextField onChange={onChangeTitleHandler} onBlur={activateViewMode} value={title} autoFocus/>\r\n          : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n  )\r\n})\r\n","\r\nexport enum ACTIONS_TYPE {\r\n  ADD_TODOLIST = 'ADD_TODOLIST',\r\n  REMOVE_TODOLIST = 'REMOVE_TODOLIST',\r\n  CHANGE_FILTER_TODOLIST = 'CHANGE_FILTER_TODOLIST',\r\n  CHANGE_TITLE_TODOLIST = 'CHANGE_TITLE_TODOLIST',\r\n  REMOVE_TASK = 'REMOVE_TASK',\r\n  ADD_TASK = 'ADD_TASK',\r\n  CHANGE_STATUS_TASK = 'CHANGE_STATUS_TASK',\r\n  CHANGE_TITLE_TASK = 'CHANGE_TITLE_TASK',\r\n  SET_TODOS = 'SET_TODOS',\r\n  SET_TASK = 'SET_TASK',\r\n}\r\n","import {addTodolistAC, removeTodolistAC, setTodoListsAC} from './tl-reducer';\r\nimport {ACTIONS_TYPE} from '../constants';\r\nimport {TaskStatuses, TaskType, todoListsAPI, UpdateTaskModelType} from '../api/api';\r\nimport {AppRootStateType, AppThunk} from '../state/store';\r\nimport {TasksStateType} from '../Components/app-withReducer/AppWithReducers';\r\n\r\n\r\nexport type TaskActionType =\r\n    ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof setTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof setTodoListsAC>\r\n\r\nconst initialState: TasksStateType = {}\r\nexport const tasksReducer = (state = initialState, action: TaskActionType): TasksStateType => {\r\n  switch (action.type) {\r\n    case ACTIONS_TYPE.SET_TASK: {\r\n      const copyState = {...state}\r\n      copyState[action.payload.todoId] = action.payload.task\r\n      return copyState\r\n    }\r\n    case ACTIONS_TYPE.SET_TODOS: {\r\n      const stateCopy = {...state}\r\n      action.payload.forEach((tl) => {\r\n        stateCopy[tl.id] = []\r\n      })\r\n      return stateCopy\r\n    }\r\n    case ACTIONS_TYPE.REMOVE_TASK: {\r\n      const copyState = {...state}\r\n      const todolistTask = state[action.todolistId]\r\n      copyState[action.todolistId] = todolistTask.filter(t => t.id !== action.id)\r\n      return copyState\r\n    }\r\n    case ACTIONS_TYPE.ADD_TASK: {\r\n      const stateCopy = {...state}\r\n      const newTask = action.payload\r\n      const tasks = stateCopy[action.payload.todoListId];\r\n      const newTasks = [newTask, ...tasks];\r\n      stateCopy[action.payload.todoListId] = newTasks;\r\n      return stateCopy;\r\n    }\r\n    case ACTIONS_TYPE.CHANGE_STATUS_TASK: {\r\n      let todolistTasks = state[action.todolistId];\r\n\r\n      let newTasksArray: Array<TaskType> = todolistTasks\r\n          .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n\r\n      state[action.todolistId] = newTasksArray;\r\n      return ({...state});\r\n    }\r\n\r\n    case ACTIONS_TYPE.CHANGE_TITLE_TASK:\r\n      return {\r\n        ...state, [action.todolistId]: state[action.todolistId]\r\n            .map(el => el.id === action.id\r\n                ? {...el, title: action.title}\r\n                : {...el})\r\n\r\n      }\r\n    case ACTIONS_TYPE.ADD_TODOLIST: {\r\n      return {...state, [action.todolistId]: []}\r\n    }\r\n    case ACTIONS_TYPE.REMOVE_TODOLIST: {\r\n      const copyState = {...state}\r\n      delete copyState[action.id]\r\n      return copyState\r\n    }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const removeTaskAC = (todolistId: string, id: string) => ({\r\n  type: ACTIONS_TYPE.REMOVE_TASK,\r\n  id,\r\n  todolistId\r\n}) as const\r\nexport const addTaskAC = (task: TaskType) => ({\r\n  type: ACTIONS_TYPE.ADD_TASK, payload: task\r\n}) as const\r\nexport const changeTaskStatusAC = (status: TaskStatuses, todolistId: string, taskId: string,) => ({\r\n  type: ACTIONS_TYPE.CHANGE_STATUS_TASK\r\n  , status, todolistId, taskId\r\n}) as const\r\nexport const changeTaskTitleAC = (id: string, title: string, todolistId: string,) => ({\r\n  type: ACTIONS_TYPE.CHANGE_TITLE_TASK,\r\n  id,\r\n  title,\r\n  todolistId\r\n}) as const\r\nexport const setTaskAC = (task: Array<TaskType>, todoId: string) => {\r\n  return {type: ACTIONS_TYPE.SET_TASK, payload: {task, todoId}} as const\r\n}\r\n\r\n\r\nexport const fetchTaskThunk = (todoId: string): AppThunk =>\r\n    async (dispatch) => {\r\n      try {\r\n\r\n        const tasks = await todoListsAPI.getTasks(todoId)\r\n        dispatch(setTaskAC(tasks.items, todoId))\r\n      } catch (e) {\r\n        console.warn(e)\r\n      }\r\n    }\r\nexport const setRemoveTask = (todoID: string, taskId: string): AppThunk =>\r\n    async (dispatch) => {\r\n      try {\r\n        await todoListsAPI.deleteTask(todoID, taskId)\r\n        dispatch(removeTaskAC(todoID, taskId))\r\n\r\n      } catch (e) {\r\n        console.warn(e)\r\n      }\r\n    }\r\nexport const setTask = (todoID: string, title: string): AppThunk =>\r\n    async (dispatch) => {\r\n      try {\r\n        const task = await todoListsAPI.createTask(todoID, title)\r\n        debugger\r\n        dispatch(addTaskAC((task.data.item)))\r\n      } catch (e) {\r\n        console.warn(e)\r\n      }\r\n    }\r\nexport const updateStatusTask = (todoID: string, taskId: string, status: TaskStatuses): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n      const state = getState()\r\n      const allAppTasks = state.tasks\r\n      const forCurrentTodoID = allAppTasks[todoID]\r\n      const currentTask = forCurrentTodoID.find((t) => t.id === taskId)\r\n\r\n      if (currentTask) {\r\n        const model: UpdateTaskModelType = {\r\n          title: currentTask.title,\r\n          description: currentTask.description,\r\n          status: status,\r\n          priority: currentTask.priority,\r\n          startDate: currentTask.startDate,\r\n          deadline: currentTask.deadline,\r\n        }\r\n        try {\r\n          await todoListsAPI.updateTask(todoID, taskId, model)\r\n          dispatch(changeTaskStatusAC(status, todoID, taskId))\r\n        } catch (e) {\r\n          console.warn(e)\r\n        }\r\n      }\r\n    }\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton, ListItem, ListItemIcon, ListItemText} from '@material-ui/core';\r\nimport s from './todoList.module.css';\r\nimport {EditableSpan} from '../editable-span/EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from '../../api/api';\r\nimport {useDispatch} from 'react-redux';\r\nimport {setRemoveTask} from '../../reducers/task-reducer';\r\n\r\nexport type TaskPropsType = {\r\n  task: TaskType\r\n  todoListId: string\r\n  // remove: (id: string, todoListId: string) => void\r\n  changeTaskTitle: (id: string, newValue: string, todoListId: string) => void\r\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const onChangeCheckbox = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    let newIsDoneValue = e.currentTarget.checked\r\n    props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId)\r\n  }, [props]);\r\n\r\n  const removeHandler = useCallback(() => dispatch(setRemoveTask(props.todoListId, props.task.id)), [props.todoListId, props.task.id,dispatch]);\r\n\r\n  const onChangeTitleHandler = useCallback((newValue: string) => {\r\n    props.changeTaskTitle(props.task.id, newValue, props.todoListId)\r\n  }, [props]);\r\n\r\n  return (\r\n      <ListItem key={props.task.id} className={props.task.status === TaskStatuses.Completed ? s.done : ''}>\r\n        <ListItemIcon>\r\n          <Checkbox color={'primary'}\r\n                    checked={props.task.status === TaskStatuses.Completed}\r\n                    onChange={onChangeCheckbox}/>\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          <EditableSpan title={props.task.title} onChange={onChangeTitleHandler}/>\r\n        </ListItemText>\r\n        <IconButton onClick={removeHandler}>\r\n          <Delete/>\r\n        </IconButton>\r\n      </ListItem>\r\n  )\r\n})\r\n","import {v1} from 'uuid';\r\nimport {ACTIONS_TYPE} from '../constants';\r\nimport {AppThunk} from '../state/store';\r\nimport {todoListsAPI, TodolistType} from '../api/api';\r\n\r\nexport type TodoListActionType =\r\n    ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof setTodoListsAC>\r\n    | ReturnType<typeof changeFilterTodolistAC>\r\n    | ReturnType<typeof changeTitleTodolistAC>\r\n\r\nexport const todoListID1 = v1() // original id\r\nexport const todoListID2 = v1()\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n  filter: FilterValuesType\r\n}\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todoListReducer = (state = initialState, action: TodoListActionType): Array<TodolistDomainType> => {\r\n  switch (action.type) {\r\n    case ACTIONS_TYPE.ADD_TODOLIST: {\r\n        return [{\r\n          id: action.todolistId,\r\n          title: action.title,\r\n          filter: 'all',\r\n          addedDate: '',\r\n          order: 0 // порядок листа в очереди\r\n        }, ...state]\r\n      }\r\n    case ACTIONS_TYPE.REMOVE_TODOLIST:\r\n      return state.filter((item) => item.id !== action.id)\r\n    case ACTIONS_TYPE.CHANGE_FILTER_TODOLIST:\r\n      return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\r\n    case ACTIONS_TYPE.CHANGE_TITLE_TODOLIST:\r\n      return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl)\r\n    case ACTIONS_TYPE.SET_TODOS: {\r\n      return action.payload.map((tl) => ({...tl, filter: 'all'}))\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\nexport const removeTodolistAC = (todolistId: string) => ({type: ACTIONS_TYPE.REMOVE_TODOLIST, id: todolistId}) as const\r\nexport const addTodolistAC = (title: string,todolistId:string) => ({type: ACTIONS_TYPE.ADD_TODOLIST, title, todolistId}) as const\r\nexport const changeFilterTodolistAC = (todolistId: string, filter: FilterValuesType) => ({\r\n  type: ACTIONS_TYPE.CHANGE_FILTER_TODOLIST,\r\n  todolistId,\r\n  filter\r\n}) as const\r\nexport const changeTitleTodolistAC = (todolistId: string, title: string) => ({\r\n  type: ACTIONS_TYPE.CHANGE_TITLE_TODOLIST,\r\n  todolistId,\r\n  title\r\n}) as const\r\nexport const setTodoListsAC = (todoLists: Array<TodolistType>) => ({type: ACTIONS_TYPE.SET_TODOS, payload: todoLists} ) as const\r\n\r\nexport const fetchTodoListsThunk = (): AppThunk =>\r\n  async  (dispatch) => {\r\n  try {\r\n  const todoLists= await  todoListsAPI.getTodoLists()\r\n    dispatch(setTodoListsAC(todoLists))\r\n  }catch (e) {\r\n    console.warn(e)\r\n  }\r\n}\r\nexport const setRemoveTodoList = (todoID: string): AppThunk =>\r\n   async (dispatch) => {\r\n  try {\r\n   await todoListsAPI.deleteTodoLists(todoID)\r\n    dispatch(removeTodolistAC(todoID))\r\n  }catch (e) {\r\n    console.warn(e)\r\n  }\r\n\r\n}\r\nexport const addTodoList = (title: string): AppThunk =>\r\n  async (dispatch) => {\r\n  try{\r\n   const todolist =  await todoListsAPI.createTodoLists(title)\r\n    dispatch(addTodolistAC(todolist.title,todolist.id))\r\n  }catch (e) {\r\n    console.warn(e)\r\n  }\r\n}\r\nexport const updateTodoList = (todoID: string, title: string): AppThunk =>\r\n   async (dispatch) => {\r\n  try {\r\n    await todoListsAPI.updateTodoLists(todoID, title)\r\n    dispatch(changeTitleTodolistAC(todoID, title))\r\n  }catch (e) {\r\n    console.warn(e)\r\n  }\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from '../add-item-form/AddItemForm';\r\nimport {EditableSpan} from '../editable-span/EditableSpan';\r\nimport {Button, IconButton, List, Paper} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './Task';\r\nimport {v1} from 'uuid';\r\nimport {TaskStatuses, TaskType} from '../../api/api';\r\nimport {useDispatch} from 'react-redux';\r\nimport {FilterValuesType, setRemoveTodoList, updateTodoList} from '../../reducers/tl-reducer';\r\nimport {fetchTaskThunk, setTask} from '../../reducers/task-reducer';\r\n\r\ntype TodoListPropsType = {\r\n  id: string\r\n  title: string\r\n  tasks: Array<TaskType>\r\n  filter: FilterValuesType\r\n  remove: (id: string, todoListId: string) => void\r\n  addTask: (value: string, todoListId: string) => void\r\n  changeTodoListNewTitle: (id: string, newTitle: string) => void\r\n  changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n  changeTaskTitle: (id: string, newValue: string, todoListId: string) => void\r\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n}\r\n\r\nconst TodoList = React.memo((props: TodoListPropsType) => {\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(()=>{\r\n    dispatch(fetchTaskThunk(props.id))\r\n  },[dispatch,props.id])\r\n\r\n\r\n  let tasksForTodoList = props.tasks\r\n  if (props.filter === 'active') {\r\n    tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n  }\r\n  if (props.filter === 'completed') {\r\n    tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n  }\r\n\r\n  const buttonValue = useCallback((event: any) => {\r\n    props.changeFilter(event.currentTarget.textContent, props.id)\r\n  }, [props])\r\n\r\n  const changeTodoListNewTitle =  useCallback((title: string) => {\r\n    dispatch(updateTodoList(props.id, title))\r\n  }, [props.id,dispatch])\r\n\r\n  const addTask = useCallback((title: string) => {\r\n    dispatch(setTask(props.id, title))\r\n  }, [props.id,dispatch])\r\n\r\n  const removeTodolist = () => {\r\n    dispatch(setRemoveTodoList(props.id))\r\n  }\r\n\r\n  const tasks = tasksForTodoList.map(task => <Task\r\n      key={v1()}\r\n      task={task}\r\n      todoListId={props.id}\r\n      changeTaskStatus={props.changeTaskStatus}\r\n      changeTaskTitle={props.changeTaskTitle}\r\n  />)\r\n  return (\r\n      <Paper>\r\n        <List>\r\n          <h3>\r\n            <EditableSpan title={props.title} onChange={changeTodoListNewTitle}/>\r\n            <IconButton onClick={removeTodolist}><Delete/></IconButton>\r\n          </h3>\r\n          <AddItemForm addItem={addTask}/>\r\n          <ul>\r\n            {tasks}\r\n          </ul>\r\n          <Button variant=\"contained\"\r\n                  color={props.filter === 'all' ? 'secondary' : 'primary'}\r\n                  onClick={buttonValue}>all</Button>\r\n          <Button variant=\"contained\"\r\n                  color={props.filter === 'active' ? 'secondary' : 'primary'}\r\n                  onClick={buttonValue}>active</Button>\r\n          <Button variant=\"contained\"\r\n                  color={props.filter === 'completed' ? 'secondary' : 'primary'}\r\n                  onClick={buttonValue}>completed</Button>\r\n        </List> </Paper>\r\n  )\r\n})\r\nexport default TodoList;\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport TodoList from '../todo-list/TodoList';\r\nimport {AddItemForm} from '../add-item-form/AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n  addTodoList,\r\n  changeFilterTodolistAC,\r\n  changeTitleTodolistAC,\r\n  fetchTodoListsThunk,\r\n  FilterValuesType,\r\n  TodolistDomainType\r\n} from '../../reducers/tl-reducer';\r\nimport {changeTaskTitleAC, removeTaskAC, setTask, updateStatusTask} from '../../reducers/task-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../state/store';\r\nimport {TaskStatuses, TaskType} from '../../api/api';\r\n\r\nexport type TasksStateType = { [key: string]: Array<TaskType> }\r\n\r\nexport const AppWithReducers = () => {\r\n  const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todoLists)\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTodoListsThunk())\r\n  }, [dispatch])\r\n\r\n  const changeTodoListNewTitle = useCallback((todolistId: string, title: string) => {\r\n    dispatch(changeTitleTodolistAC(todolistId, title))\r\n  }, [dispatch])\r\n  const addTask = useCallback((title: string, todoListId: string): void => {\r\n    dispatch(setTask(title, todoListId))\r\n  }, [dispatch])\r\n  const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string): void => {\r\n    dispatch(updateStatusTask(todolistId, id, status))\r\n  }, [dispatch])\r\n  const changeTaskTitle = useCallback((id: string, newTitle: string, todoListId: string): void => {\r\n    dispatch(changeTaskTitleAC(id, todoListId, newTitle))\r\n  }, [dispatch])\r\n  const removeTask = useCallback((id: string, todoListId: string) => {\r\n    dispatch(removeTaskAC(id, todoListId))\r\n  }, [dispatch])\r\n  const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n    dispatch(changeFilterTodolistAC(todolistId, value))\r\n  }, [dispatch])\r\n  const addTodoListClick = useCallback((title: string) => {\r\n    dispatch(addTodoList(title))\r\n  }, [dispatch])\r\n\r\n  return (\r\n      <div className=\"App\">\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n              <Menu/>\r\n            </IconButton>\r\n            <Typography variant=\"h3\">\r\n              Todo\r\n            </Typography>\r\n            <Button color=\"inherit\">Login</Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Container fixed>\r\n          <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodoListClick}/>\r\n          </Grid>\r\n          <Grid container spacing={10}>\r\n            {\r\n              todoLists.map((t) => {\r\n                let tasksForTodoList = tasks[t.id]\r\n                return (\r\n                    <Grid item key={t.id}>\r\n                      <Paper>\r\n                        <TodoList\r\n                            id={t.id}\r\n                            title={t.title}\r\n                            filter={t.filter}\r\n                            addTask={addTask}\r\n                            remove={removeTask}\r\n                            tasks={tasksForTodoList}\r\n                            changeFilter={changeFilter}\r\n                            changeTaskStatus={changeStatus}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodoListNewTitle={changeTodoListNewTitle}\r\n                        />\r\n                      </Paper>\r\n                    </Grid>\r\n                )\r\n              })\r\n            }\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n  )\r\n}\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {TaskActionType, tasksReducer} from '../reducers/task-reducer';\r\nimport {TodoListActionType, todoListReducer} from '../reducers/tl-reducer';\r\nimport thunk, {ThunkAction} from 'redux-thunk';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todoLists: todoListReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// экшен для типизации санки сборка из всех экшенов из редюсоров\r\ntype ActionType = TodoListActionType | TaskActionType\r\n//типизация санок\r\nexport type AppThunk = ThunkAction<void, AppRootStateType, unknown, ActionType>\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {AppWithReducers} from './Components/app-withReducer/AppWithReducers';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store'\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <AppWithReducers/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"todoList_active__3oVN6\",\"done\":\"todoList_done__3zuU6\",\"error\":\"todoList_error__1Ckbf\",\"message_error\":\"todoList_message_error__2OJDR\"};"],"sourceRoot":""}
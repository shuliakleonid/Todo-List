{"version":3,"sources":["Components/todo-list/todoList.module.css","constants.ts","api/api.ts","reducers/task-reducer.ts","reducers/app-reducer.ts","utils/error-utils.ts","reducers/tl-reducer.ts","api/tl-api.ts","reducers/auth-reducer.ts","state/store.ts","pages/login/Login.tsx","pages/not-found/not-found.tsx","Components/add-item-form/AddItemForm.tsx","Components/editable-span/EditableSpan.tsx","Components/todo-list/Task.tsx","Components/todo-list/TodoList.tsx","Components/error-snackbars/ErrorSnackbar.tsx","pages/dashboard/Dashboard.tsx","Components/app/App.tsx","index.tsx"],"names":["module","exports","ACTIONS_TYPE","TaskStatuses","TaskPriorities","ResultResponseCodes","instance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","then","res","data","title","post","titleId","delete","put","todoListId","taskId","initialState","status","error","setAppStatus","type","SET_STATUS","setError","SET_ERROR","handleServerAppError","dispatch","messages","length","handleServerNetworkError","message","removeTaskAC","todolistId","id","REMOVE_TASK","addTaskAC","task","ADD_TASK","payload","changeTaskStatusAC","CHANGE_STATUS_TASK","setTaskAC","todoId","SET_TASK","setTask","todoID","a","resultCode","success","item","v1","addTodolistAC","ADD_TODOLIST","changeTitleTodolistAC","CHANGE_TITLE_TODOLIST","setTodoListsAC","todoLists","SET_TODOS","authAPI","r","isLoggedIn","isInitialized","setIsLoggedIn","value","SET_IS_LOGGED_IN","rootReducer","combineReducers","tasks","state","action","copyState","stateCopy","forEach","tl","todolistTask","filter","t","newTask","newTasks","todolistTasks","newTasksArray","map","CHANGE_TITLE_TASK","el","REMOVE_TODOLIST","addedDate","entityStatus","order","CHANGE_FILTER_TODOLIST","CHANGE_TODOLIST_ENTITY_STATUS","app","auth","SET_IS_INITIALIZED","store","createStore","applyMiddleware","thunk","window","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","Login","classes","useDispatch","useSelector","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","handleChange","handleSubmit","touched","getFieldProps","errorEmail","errorPassword","to","Container","component","maxWidth","CssBaseline","className","Avatar","Typography","variant","TextField","label","name","autoComplete","helperText","required","fullWidth","autoFocus","FormControlLabel","control","Checkbox","onChange","color","Button","Grid","container","xs","Link","href","NotFound","AddItemForm","React","memo","props","useState","valueTodo","setValueTodo","disabled","event","target","onKeyPress","trim","charCode","addItem","Boolean","onBlur","IconButton","onClick","AddBox","EditableSpan","setTitle","editMode","setEditMode","e","currentTarget","onDoubleClick","Task","onChangeCheckbox","useCallback","newIsDoneValue","checked","changeTaskStatus","Completed","New","removeHandler","onChangeTitleHandler","newValue","changeTaskTitle","ListItem","key","s","done","ListItemIcon","ListItemText","Delete","TodoList","tasksForTodoList","buttonValue","changeFilter","textContent","changeTodoListNewTitle","updateTodoList","addTask","enentityStatus","Paper","List","Alert","elevation","ErrorSnackbar","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","Dashboard","useEffect","todoList","items","changeStatus","getState","allAppTasks","forCurrentTodoID","currentTask","find","model","description","priority","startDate","deadline","response","updateStatusTask","newTitle","changeTaskTitleAC","removeTask","changeFilterTodolistAC","addTodoListClick","todolist","addTodoList","AppBar","position","LinearProgress","Toolbar","edge","aria-label","Menu","fixed","style","padding","remove","App","exact","path","render","top","textAlign","CircularProgress","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5023a02d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"todoList_active__3oVN6\",\"done\":\"todoList_done__3zuU6\",\"error\":\"todoList_error__1Ckbf\",\"message_error\":\"todoList_message_error__2OJDR\"};","\r\nexport enum ACTIONS_TYPE {\r\n  ADD_TODOLIST = 'ADD_TODOLIST',\r\n  REMOVE_TODOLIST = 'REMOVE_TODOLIST',\r\n  CHANGE_FILTER_TODOLIST = 'CHANGE_FILTER_TODOLIST',\r\n  CHANGE_TITLE_TODOLIST = 'CHANGE_TITLE_TODOLIST',\r\n  REMOVE_TASK = 'REMOVE_TASK',\r\n  ADD_TASK = 'ADD_TASK',\r\n  CHANGE_STATUS_TASK = 'CHANGE_STATUS_TASK',\r\n  CHANGE_TITLE_TASK = 'CHANGE_TITLE_TASK',\r\n  SET_TODOS = 'SET_TODOS',\r\n  SET_TASK = 'SET_TASK',\r\n  SET_STATUS = 'SET_STATUS',\r\n  SET_ERROR = 'SET_ERROR',\r\n  CHANGE_TODOLIST_ENTITY_STATUS = 'CHANGE_TODOLIST_ENTITY_STATUS',\r\n  SET_IS_LOGGED_IN = 'SET_IS_LOGGED_IN',\r\n  SET_IS_INITIALIZED = 'SET_IS_INITIALIZED'\r\n\r\n}\r\n","import axios from 'axios';\r\n\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n  description: string\r\n  title: string\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n  id: string\r\n  todoListId: string\r\n  order: number\r\n  addedDate: string\r\n}\r\nexport type TodolistType = {\r\n  id: string\r\n  title: string\r\n  addedDate: string\r\n  order: number\r\n}\r\nexport type UpdateTaskModelType = {\r\n  title: string\r\n  description: string\r\n  status: number\r\n  priority: number\r\n  startDate: string\r\n  deadline: string\r\n}\r\nexport type ResponseType<T = {}> = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  data: T\r\n}\r\ntype TasksResponse = {\r\n  error: string | null\r\n  totalCount: number\r\n  items: Array<TaskType>\r\n}\r\ntype UpdateTaskType = {\r\n  title: string\r\n  description: string\r\n  status: number\r\n  priority: number\r\n  startDate: string\r\n  deadline: string\r\n}\r\n\r\nexport const instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': '69c9d2d3-e5a4-4bb9-9356-a9517225e2b4'\r\n  }\r\n})\r\n\r\nexport const todoListsAPI = {\r\n  getTodoLists() {\r\n    return instance.get<Array<TodolistType>>('todo-lists').then(res => res.data)\r\n  },\r\n  createTodoLists(title: string) {\r\n    return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title}).then(res => res.data)\r\n  },\r\n  deleteTodoLists(titleId: string) {\r\n    return instance.delete<ResponseType<{}>>(`todo-lists/${titleId}`).then(res => res.data)\r\n  },\r\n  updateTodoLists(titleId: string, title: string) {\r\n    return instance.put<ResponseType<{}>>(`todo-lists/${titleId}`, {title}).then(res => res.data)\r\n  },\r\n  getTasks(titleId: string) {\r\n    return instance.get<TasksResponse>(`todo-lists/${titleId}/tasks`).then(res => res.data)\r\n  },\r\n  deleteTask(todoListId: string, taskId: string) {\r\n    return instance.delete<TasksResponse>(`todo-lists/${todoListId}/tasks/${taskId}`).then(res => res.data)\r\n  },\r\n  createTask(todoListId: string, title: string) {\r\n    return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todoListId}/tasks`, {title}).then(res => res.data)\r\n  },\r\n  updateTask(todoListId: string, taskId: string, title: UpdateTaskModelType) {\r\n    return instance.put<ResponseType<UpdateTaskType>>(`todo-lists/${todoListId}/tasks/${taskId}`, {title}).then(res => res.data)\r\n  },\r\n\r\n}\r\n","import {addTodolistAC, removeTodolistAC, setTodoListsAC} from './tl-reducer';\r\nimport {ACTIONS_TYPE} from '../constants';\r\nimport {TaskStatuses, TaskType, todoListsAPI, UpdateTaskModelType} from '../api/api';\r\nimport {AppRootStateType, AppThunk} from '../state/store';\r\nimport {TasksStateType} from '../pages/dashboard/Dashboard';\r\nimport {setAppStatus, setError} from './app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\r\n\r\nexport enum ResultResponseCodes {\r\n  success = 0,\r\n  failed = 1,\r\n  captcha = 10\r\n}\r\n\r\nexport type TaskActionType =\r\n    ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof setTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof setTodoListsAC>\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: TaskActionType): TasksStateType => {\r\n  switch (action.type) {\r\n    case ACTIONS_TYPE.SET_TASK: {\r\n      const copyState = {...state}\r\n      copyState[action.payload.todoId] = action.payload.task\r\n      return copyState\r\n    }\r\n    case ACTIONS_TYPE.SET_TODOS: {\r\n      const stateCopy = {...state}\r\n      action.payload.forEach((tl) => {\r\n        stateCopy[tl.id] = []\r\n      })\r\n      return stateCopy\r\n    }\r\n    case ACTIONS_TYPE.REMOVE_TASK: {\r\n      const copyState = {...state}\r\n      const todolistTask = state[action.todolistId]\r\n      copyState[action.todolistId] = todolistTask.filter(t => t.id !== action.id)\r\n      return copyState\r\n    }\r\n    case ACTIONS_TYPE.ADD_TASK: {\r\n      const stateCopy = {...state}\r\n      const newTask = action.payload\r\n      const tasks = stateCopy[action.payload.todoListId];\r\n      const newTasks = [newTask, ...tasks];\r\n      stateCopy[action.payload.todoListId] = newTasks;\r\n      return stateCopy;\r\n    }\r\n    case ACTIONS_TYPE.CHANGE_STATUS_TASK: {\r\n      let todolistTasks = state[action.todolistId];\r\n\r\n      let newTasksArray: Array<TaskType> = todolistTasks\r\n          .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n\r\n      state[action.todolistId] = newTasksArray;\r\n      return ({...state});\r\n    }\r\n\r\n    case ACTIONS_TYPE.CHANGE_TITLE_TASK:\r\n      return {\r\n        ...state, [action.todolistId]: state[action.todolistId]\r\n            .map(el => el.id === action.id\r\n                ? {...el, title: action.title}\r\n                : {...el})\r\n\r\n      }\r\n    case ACTIONS_TYPE.ADD_TODOLIST: {\r\n      return {...state, [action.todolistId]: []}\r\n    }\r\n    case ACTIONS_TYPE.REMOVE_TODOLIST: {\r\n      const copyState = {...state}\r\n      delete copyState[action.id]\r\n      return copyState\r\n    }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const removeTaskAC = (todolistId: string, id: string) => ({\r\n  type: ACTIONS_TYPE.REMOVE_TASK,\r\n  id,\r\n  todolistId\r\n}) as const\r\nexport const addTaskAC = (task: TaskType) => ({\r\n  type: ACTIONS_TYPE.ADD_TASK, payload: task\r\n}) as const\r\nexport const changeTaskStatusAC = (status: TaskStatuses, todolistId: string, taskId: string,) => ({\r\n  type: ACTIONS_TYPE.CHANGE_STATUS_TASK\r\n  , status, todolistId, taskId\r\n}) as const\r\nexport const changeTaskTitleAC = (id: string, title: string, todolistId: string,) => ({\r\n  type: ACTIONS_TYPE.CHANGE_TITLE_TASK,\r\n  id,\r\n  title,\r\n  todolistId\r\n}) as const\r\nexport const setTaskAC = (task: Array<TaskType>, todoId: string) => {\r\n  return {type: ACTIONS_TYPE.SET_TASK, payload: {task, todoId}} as const\r\n}\r\n\r\n\r\nexport const fetchTaskThunk = (todoId: string): AppThunk =>\r\n    async (dispatch) => {\r\n      try {\r\n        dispatch(setAppStatus('loading'))\r\n        const tasks = await todoListsAPI.getTasks(todoId)\r\n        dispatch(setTaskAC(tasks.items, todoId))\r\n        dispatch(setAppStatus('succeeded'))\r\n      } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n      }\r\n    }\r\nexport const setRemoveTask = (todoID: string, taskId: string): AppThunk =>\r\n    async (dispatch) => {\r\n      try {\r\n        dispatch(setAppStatus('loading'))\r\n        await todoListsAPI.deleteTask(todoID, taskId)\r\n        dispatch(removeTaskAC(todoID, taskId))\r\n      } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n      }finally {\r\n        dispatch(setAppStatus('succeeded'))\r\n      }\r\n    }\r\nexport const setTask = (todoID: string, title: string): AppThunk =>\r\n    async (dispatch) => {\r\n      try {\r\n        dispatch(setAppStatus('loading'))\r\n        const task = await todoListsAPI.createTask(todoID, title)\r\n        if (task.resultCode === ResultResponseCodes.success) {\r\n          dispatch(addTaskAC((task.data.item)))\r\n        } else {\r\n          handleServerAppError(task, dispatch);\r\n        }\r\n      } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n      } finally {\r\n        dispatch(setAppStatus('succeeded'))\r\n      }\r\n    }\r\nexport const updateStatusTask = (todoID: string, taskId: string, status: TaskStatuses): AppThunk =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n      const state = getState()\r\n      const allAppTasks = state.tasks\r\n      const forCurrentTodoID = allAppTasks[todoID]\r\n      const currentTask = forCurrentTodoID.find((t) => t.id === taskId)\r\n\r\n      if (currentTask) {\r\n        const model: UpdateTaskModelType = {\r\n          title: currentTask.title,\r\n          description: currentTask.description,\r\n          status: status,\r\n          priority: currentTask.priority,\r\n          startDate: currentTask.startDate,\r\n          deadline: currentTask.deadline,\r\n        }\r\n        try {\r\n          dispatch(setAppStatus('loading'))\r\n          const response = await todoListsAPI.updateTask(todoID, taskId, model)\r\n          if (response.resultCode === 0) {\r\n          dispatch(changeTaskStatusAC(status, todoID, taskId))\r\n          dispatch(setAppStatus('succeeded'))\r\n          }else{\r\n            handleServerAppError(response, dispatch);\r\n          }\r\n        } catch (e) {\r\n          handleServerNetworkError(e, dispatch)\r\n        }\r\n      }\r\n    }\r\n","import {ACTIONS_TYPE} from '../constants';\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type AppActionType = ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setError>\r\n\r\n\r\nconst initialState = {\r\n  status: 'loading' as RequestStatusType,\r\n  error:  null as null | string\r\n}\r\n\r\nexport type AppStateType = typeof initialState\r\n\r\nexport const appReducer = (state: AppStateType = initialState, action: AppActionType): AppStateType => {\r\n  switch (action.type) {\r\n    case ACTIONS_TYPE.SET_STATUS: {\r\n      return {...state, status: action.status}\r\n    }\r\n    case ACTIONS_TYPE.SET_ERROR: {\r\n      return {...state, error: action.error}\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const setAppStatus = (status: RequestStatusType) => ({type: ACTIONS_TYPE.SET_STATUS, status}) as const\r\nexport const setError = (error: string | null) => ({type: ACTIONS_TYPE.SET_ERROR, error}) as const\r\n//\r\n//\r\n// export const fetchTaskThunk = (todoId: string): AppThunk =>\r\n//     async (dispatch) => {\r\n//       try {\r\n//\r\n//         const tasks = await todoListsAPI.getTasks(todoId)\r\n//         dispatch(setTaskAC(tasks.items, todoId))\r\n//       } catch (e) {\r\n//         console.warn(e)\r\n//       }\r\n//     }\r\n","import {\r\n  AppActionType,\r\n  setAppStatus,\r\n  setError\r\n} from '../reducers/app-reducer'\r\nimport {ResponseType} from '../api/api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<AppActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setError(data.messages[0]))\r\n    } else {\r\n        dispatch(setError('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<AppActionType>) => {\r\n    dispatch(setError(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n","import {v1} from 'uuid';\r\nimport {ACTIONS_TYPE} from '../constants';\r\nimport {AppThunk} from '../state/store';\r\nimport {todoListsAPI, TodolistType} from '../api/api';\r\nimport {RequestStatusType, setAppStatus, setError} from './app-reducer';\r\nimport {fetchTaskThunk} from './task-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\r\n\r\nexport type TodoListActionType =\r\n    ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof setTodoListsAC>\r\n    | ReturnType<typeof changeFilterTodolistAC>\r\n    | ReturnType<typeof changeTitleTodolistAC>\r\n    | ReturnType<typeof changeTodolistEntityStatus>\r\n\r\nexport const todoListID1 = v1() // original id\r\nexport const todoListID2 = v1()\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n  filter: FilterValuesType\r\n  entityStatus: RequestStatusType\r\n}\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todoListReducer = (state = initialState, action: TodoListActionType): Array<TodolistDomainType> => {\r\n  switch (action.type) {\r\n    case ACTIONS_TYPE.ADD_TODOLIST: {\r\n      return [{\r\n        id: action.todolistId,\r\n        title: action.title,\r\n        filter: 'all',\r\n        addedDate: '',\r\n        entityStatus: 'idle',\r\n        order: 0 // порядок листа в очереди\r\n      }, ...state]\r\n    }\r\n    case ACTIONS_TYPE.REMOVE_TODOLIST:\r\n      return state.filter((item) => item.id !== action.id)\r\n    case ACTIONS_TYPE.CHANGE_FILTER_TODOLIST:\r\n      return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\r\n    case ACTIONS_TYPE.CHANGE_TITLE_TODOLIST:\r\n      return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl)\r\n    case ACTIONS_TYPE.SET_TODOS: {\r\n      return action.payload.map((tl) => ({...tl, filter: 'all', entityStatus: 'idle',}))\r\n    }\r\n    case ACTIONS_TYPE.CHANGE_TODOLIST_ENTITY_STATUS: {\r\n      return state.map(tl => tl.id === action.todoListId ? {...tl, entityStatus:action.status} : tl)\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\nexport const removeTodolistAC = (todolistId: string) => ({type: ACTIONS_TYPE.REMOVE_TODOLIST, id: todolistId}) as const\r\nexport const addTodolistAC = (title: string, todolistId: string) => ({\r\n  type: ACTIONS_TYPE.ADD_TODOLIST,\r\n  title,\r\n  todolistId\r\n}) as const\r\nexport const changeFilterTodolistAC = (todolistId: string, filter: FilterValuesType) => ({\r\n  type: ACTIONS_TYPE.CHANGE_FILTER_TODOLIST,\r\n  todolistId,\r\n  filter\r\n}) as const\r\nexport const changeTitleTodolistAC = (todolistId: string, title: string) => ({\r\n  type: ACTIONS_TYPE.CHANGE_TITLE_TODOLIST,\r\n  todolistId,\r\n  title\r\n}) as const\r\nexport const setTodoListsAC = (todoLists: Array<TodolistType>) => ({\r\n  type: ACTIONS_TYPE.SET_TODOS,\r\n  payload: todoLists\r\n}) as const\r\nexport const changeTodolistEntityStatus = (todoListId:string,status:RequestStatusType) => ({type: ACTIONS_TYPE.CHANGE_TODOLIST_ENTITY_STATUS,todoListId,status}) as const\r\nexport const fetchTodoListsThunk = (): AppThunk =>\r\n    async (dispatch) => {\r\n      try {\r\n        dispatch(setAppStatus('loading'))\r\n        const todoLists = await todoListsAPI.getTodoLists()\r\n        dispatch(setTodoListsAC(todoLists))\r\n        todoLists.forEach(todoList => dispatch(fetchTaskThunk(todoList.id)))\r\n        dispatch(setAppStatus('succeeded'))\r\n      } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n\r\n      }\r\n    }\r\nexport const setRemoveTodoList = (todoID: string): AppThunk =>\r\n    async (dispatch) => {\r\n      try {\r\n        dispatch(changeTodolistEntityStatus(todoID,'loading'))\r\n        dispatch(setAppStatus('loading'))\r\n        await todoListsAPI.deleteTodoLists(todoID)\r\n        dispatch(removeTodolistAC(todoID))\r\n\r\n\r\n      } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n\r\n      }finally {\r\n        dispatch(setAppStatus('succeeded'))\r\n      }\r\n\r\n    }\r\nexport const addTodoList = (title: string): AppThunk =>\r\n    async (dispatch) => {\r\n      try {\r\n        dispatch(setAppStatus('loading'))\r\n        const todolist = await todoListsAPI.createTodoLists(title)\r\n        // dispatch(addTodolistAC(todolist.data.item.title, todolist.data.item.id))\r\n        if (todolist.resultCode === 0) {\r\n          dispatch(addTodolistAC(todolist.data.item.title, todolist.data.item.id))\r\n          // dispatch(setAppStatus('succeeded'))\r\n        } else {\r\n          handleServerAppError(todolist, dispatch);\r\n        }\r\n      } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n\r\n      } finally {\r\n        dispatch(setAppStatus('succeeded'))\r\n      }\r\n    }\r\nexport const updateTodoList = (todoID: string, title: string): AppThunk =>\r\n    async (dispatch) => {\r\n      try {\r\n        dispatch(setAppStatus('loading'))\r\n        await todoListsAPI.updateTodoLists(todoID, title)\r\n        dispatch(changeTitleTodolistAC(todoID, title))\r\n        dispatch(setAppStatus('succeeded'))\r\n      } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n      }\r\n    }\r\n","import {instance,ResponseType} from './api'\r\n\r\nexport type LoginDataType ={\r\n  email:string\r\n  password:string\r\n  rememberMe?:boolean\r\n  captcha?: string\r\n}\r\ntype AuthType = {\r\n  id:number\r\n  email:string\r\n  login:string\r\n}\r\nexport const authAPI = {\r\n  login(data:LoginDataType) {\r\n    return instance.post<ResponseType>('auth/login',data).then(r=>r.data)\r\n  },\r\n  me(){\r\n    return instance.get<ResponseType<AuthType>>('auth/me').then(r=>r.data)\r\n  },\r\n  logOut(){\r\n    return instance.delete<ResponseType>('auth/login').then(r=>r.data)\r\n  }\r\n\r\n}\r\n","import {ACTIONS_TYPE} from '../constants';\r\nimport {AppThunk} from '../state/store';\r\nimport {authAPI, LoginDataType} from '../api/tl-api';\r\nimport {setAppStatus} from './app-reducer';\r\nimport {handleServerNetworkError} from '../utils/error-utils';\r\n\r\nexport type AuthActionType =\r\n    ReturnType<typeof setIsLoggedIn>\r\n    | ReturnType<typeof setInitialized>\r\n\r\nconst initialState = {\r\n  isLoggedIn: false,\r\n  isInitialized: false\r\n};\r\nexport type AuthStateType = typeof initialState\r\nexport const authReducer = (state: AuthStateType = initialState, action: AuthActionType): AuthStateType => {\r\n  switch (action.type) {\r\n    case ACTIONS_TYPE.SET_IS_LOGGED_IN:\r\n      return {...state, isLoggedIn: action.value}\r\n    case ACTIONS_TYPE.SET_IS_INITIALIZED:\r\n      return {...state, isInitialized: action.value}\r\n    default:\r\n      return {...state}\r\n  }\r\n}\r\nexport const setIsLoggedIn = (value: boolean) => ({type: ACTIONS_TYPE.SET_IS_LOGGED_IN, value}) as const\r\nexport const setInitialized = (value: boolean) => ({type: ACTIONS_TYPE.SET_IS_INITIALIZED, value}) as const\r\nexport const login = (data: LoginDataType): AppThunk =>\r\n    async (dispatch) => {\r\n      try {\r\n        dispatch(setAppStatus('loading'))\r\n        const response = await authAPI.login(data)\r\n        if (response.resultCode === 0) {\r\n          dispatch(setIsLoggedIn(true))\r\n        }\r\n      } catch (e) {\r\n      } finally {\r\n        dispatch(setAppStatus('succeeded'))\r\n      }\r\n    }\r\nexport const initializeApp = (): AppThunk =>\r\n    async (dispatch) => {\r\n      try {\r\n        const response = await authAPI.me()\r\n        if (response.resultCode === 0) {\r\n          dispatch(setIsLoggedIn(true))\r\n        }\r\n      } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n      }finally {\r\n        dispatch(setInitialized(true))\r\n      }\r\n    }\r\nexport const logOut = (): AppThunk =>\r\n   async (dispatch)=>{\r\n  try {\r\ndebugger\r\n    const response = await authAPI.logOut()\r\n    if (response.resultCode === 0) {\r\n    dispatch(setIsLoggedIn(false))}\r\n  }catch (e) {\r\n    handleServerNetworkError(e, dispatch)\r\n  }\r\n    }\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {TaskActionType, tasksReducer} from '../reducers/task-reducer';\r\nimport {TodoListActionType, todoListReducer} from '../reducers/tl-reducer';\r\nimport thunk, {ThunkAction} from 'redux-thunk';\r\nimport {AppActionType, appReducer} from '../reducers/app-reducer';\r\nimport {AuthActionType, authReducer} from '../reducers/auth-reducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todoLists: todoListReducer,\r\n  app:appReducer,\r\n  auth:authReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// экшен для типизации санки сборка из всех экшенов из редюсоров\r\ntype ActionType = TodoListActionType | TaskActionType | AppActionType | AuthActionType\r\n//типизация санок\r\nexport type AppThunk = ThunkAction<void, AppRootStateType, unknown, ActionType>\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react'\r\nimport {Button, Checkbox, CircularProgress, FormControlLabel, Grid, makeStyles, TextField} from '@material-ui/core'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Link from '@material-ui/core/Link';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport {useFormik} from 'formik';\r\nimport {AuthStateType, login} from '../../reducers/auth-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../state/store';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\ntype FormikErrorType = {\r\n  email?: string\r\n  password?: string\r\n  rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch()\r\n  const {isLoggedIn,isInitialized} = useSelector<AppRootStateType, AuthStateType>(state => state.auth)\r\n\r\n  const {handleChange, handleSubmit, values, errors, touched, resetForm, getFieldProps} = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false,\r\n\r\n    },\r\n    validate: (values) => {\r\n      const errors: FormikErrorType = {};\r\n      if (!values.email) {\r\n        errors.email = 'Required';\r\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n      }\r\n      if (!values.password) {\r\n        errors.password = 'Required';\r\n      } else if (values.password.length < 3) {\r\n        errors.password = 'Password must be longer';\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: values => {\r\n      dispatch(login(values))\r\n      resetForm()\r\n    }\r\n  })\r\n\r\n  const errorEmail = !!(touched.email && errors.email)\r\n  const errorPassword = !!(touched.password && errors.password)\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to={'/'}/>\r\n  }\r\n  return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline/>\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon/>\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Log In\r\n          </Typography>\r\n          <form className={classes.form} onSubmit={handleSubmit}>\r\n            <TextField\r\n                error={errorEmail && !!errors.email}\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                // onChange={handleChange}\r\n                // onBlur={handleBlur}\r\n                // value={values.email}\r\n                helperText={errorEmail && errors.email}\r\n                required\r\n                fullWidth\r\n                autoFocus\r\n                {...getFieldProps('email')}\r\n            />\r\n            <TextField\r\n                error={errorPassword}\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                // onChange={handleChange}\r\n                // onBlur={handleBlur}\r\n                // value={values.password}\r\n                helperText={errorPassword && errors.password}\r\n                required\r\n                fullWidth\r\n                {...getFieldProps('password')}\r\n            />\r\n            <FormControlLabel\r\n                control={<Checkbox name=\"rememberMe\" value={values.rememberMe} onChange={handleChange}\r\n                                   color=\"primary\"/>}\r\n                label=\"Remember me\"\r\n            />\r\n            <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}\r\n            >\r\n              Log In\r\n            </Button>\r\n            <Grid container>\r\n              <Grid item xs>\r\n                <Link href={'https://social-network.samuraijs.com/'} variant=\"body2\">\r\n                  To log in get registered\r\n                </Link>\r\n              </Grid>\r\n              <Grid item>\r\n                <p>or use common test account credentials:</p>\r\n                <p>Email: free@samuraijs.com</p>\r\n                <p>Password: free</p>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n  return (\r\n      <div>\r\n        I`m not found!\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormType = {\r\n  addItem: (value: string) => void\r\n  disabled?: boolean\r\n}\r\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\r\n  const [valueTodo, setValueTodo] = useState('')\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setValueTodo(event.target.value)\r\n    setError(null)\r\n  }\r\n  const onClickButtonAdd = () => {\r\n    if (valueTodo.trim()) {\r\n      props.addItem(valueTodo)\r\n      setValueTodo('')\r\n    } else {\r\n      setError('Error write name!')\r\n    }\r\n  }\r\n  const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>): void => {\r\n    if (error !== null) {\r\n      setError(null);\r\n    }\r\n    const value = valueTodo.trim();\r\n    if (event.charCode === 13 && value !== '') {\r\n      props.addItem(value)\r\n      setValueTodo('')\r\n    } else {\r\n      setError('Error write name!')\r\n    }\r\n  }\r\n\r\n  return (\r\n      <div>\r\n        <TextField value={valueTodo}\r\n                   disabled={props.disabled}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   helperText={error && 'Write title'}\r\n                   label={'Title'}\r\n                   error={Boolean(error)}\r\n                   onBlur={() => {\r\n                     setError(null)\r\n                   }}\r\n        />\r\n        <IconButton onClick={onClickButtonAdd} disabled={props.disabled}>\r\n          <AddBox/>\r\n        </IconButton>\r\n      </div>\r\n  )\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpanTypeProps = {\r\n  title: string\r\nonChange:(value:string)=>void\r\n}\r\nexport const EditableSpan = React.memo((props: EditableSpanTypeProps) => {\r\n  const [title, setTitle] = useState('')\r\n  const [editMode, setEditMode] = useState(false)\r\n  const activateEditMode = () => {\r\n    setEditMode(true)\r\n    setTitle(props.title)\r\n  }\r\n  const activateViewMode = () => {\r\n    props.onChange(title)\r\n    setEditMode(false)\r\n  }\r\n  const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n  return (editMode\r\n          ? <TextField onChange={onChangeTitleHandler} onBlur={activateViewMode} value={title} autoFocus/>\r\n          : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n  )\r\n})\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton, ListItem, ListItemIcon, ListItemText} from '@material-ui/core';\r\nimport s from './todoList.module.css';\r\nimport {EditableSpan} from '../editable-span/EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from '../../api/api';\r\nimport {useDispatch} from 'react-redux';\r\nimport {setRemoveTask} from '../../reducers/task-reducer';\r\n\r\nexport type TaskPropsType = {\r\n  disabled:boolean\r\n  task: TaskType\r\n  todoListId: string\r\n  changeTaskTitle: (id: string, newValue: string, todoListId: string) => void\r\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const onChangeCheckbox = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    let newIsDoneValue = e.currentTarget.checked\r\n    props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId)\r\n  }, [props]);\r\n\r\n  const removeHandler = useCallback(() => dispatch(setRemoveTask(props.todoListId, props.task.id)), [props.todoListId, props.task.id,dispatch]);\r\n\r\n  const onChangeTitleHandler = useCallback((newValue: string) => {\r\n    props.changeTaskTitle(props.task.id, newValue, props.todoListId)\r\n  }, [props]);\r\n\r\n  return (\r\n      <ListItem key={props.task.id} className={props.task.status === TaskStatuses.Completed ? s.done : ''}>\r\n        <ListItemIcon>\r\n          <Checkbox color={'primary'}\r\n                    checked={props.task.status === TaskStatuses.Completed}\r\n                    onChange={onChangeCheckbox}/>\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          <EditableSpan title={props.task.title} onChange={onChangeTitleHandler}/>\r\n        </ListItemText>\r\n        <IconButton onClick={removeHandler} disabled={props.disabled}>\r\n          <Delete/>\r\n        </IconButton>\r\n      </ListItem>\r\n  )\r\n})\r\n","import React, {useCallback} from 'react';\r\nimport {AddItemForm} from '../add-item-form/AddItemForm';\r\nimport {EditableSpan} from '../editable-span/EditableSpan';\r\nimport {Button, IconButton, List, Paper} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './Task';\r\nimport {v1} from 'uuid';\r\nimport {TaskStatuses, TaskType} from '../../api/api';\r\nimport {useDispatch} from 'react-redux';\r\nimport {FilterValuesType, setRemoveTodoList, updateTodoList} from '../../reducers/tl-reducer';\r\nimport {setTask} from '../../reducers/task-reducer';\r\nimport {RequestStatusType} from '../../reducers/app-reducer';\r\n\r\ntype TodoListPropsType = {\r\n  id: string\r\n  title: string\r\n  tasks: Array<TaskType>\r\n  filter: FilterValuesType\r\n  enentityStatus: RequestStatusType\r\n  remove: (id: string, todoListId: string) => void\r\n  addTask: (value: string, todoListId: string) => void\r\n  changeTodoListNewTitle: (id: string, newTitle: string) => void\r\n  changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n  changeTaskTitle: (id: string, newValue: string, todoListId: string) => void\r\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n}\r\n\r\nconst TodoList = React.memo((props: TodoListPropsType) => {\r\n  const dispatch = useDispatch()\r\n  let tasksForTodoList = props.tasks\r\n  if (props.filter === 'active') {\r\n    tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n  }\r\n  if (props.filter === 'completed') {\r\n    tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n  }\r\n  const buttonValue = useCallback((event: any) => {\r\n    props.changeFilter(event.currentTarget.textContent, props.id)\r\n  }, [props])\r\n  const changeTodoListNewTitle = useCallback((title: string) => {\r\n    dispatch(updateTodoList(props.id, title))\r\n  }, [props.id, dispatch])\r\n  const addTask = useCallback((title: string) => {\r\n    dispatch(setTask(props.id, title))\r\n  }, [props.id, dispatch])\r\n  const removeTodolist = () => {\r\n    dispatch(setRemoveTodoList(props.id))\r\n  }\r\n  const tasks = tasksForTodoList.map(task => <Task\r\n      disabled={props.enentityStatus === 'loading'}\r\n      key={v1()}\r\n      task={task}\r\n      todoListId={props.id}\r\n      changeTaskStatus={props.changeTaskStatus}\r\n      changeTaskTitle={props.changeTaskTitle}\r\n  />)\r\n  return (\r\n      <Paper>\r\n        <List>\r\n          <h3>\r\n            <EditableSpan title={props.title} onChange={changeTodoListNewTitle}/>\r\n            <IconButton\r\n                onClick={removeTodolist}\r\n                disabled={props.enentityStatus === 'loading'}>\r\n              <Delete/>\r\n            </IconButton>\r\n          </h3>\r\n          <AddItemForm addItem={addTask} disabled={props.enentityStatus === 'loading'}/>\r\n          <ul>\r\n            {tasks}\r\n          </ul>\r\n          <Button variant=\"contained\"\r\n                  color={props.filter === 'all' ? 'secondary' : 'primary'}\r\n                  onClick={buttonValue}>all</Button>\r\n          <Button variant=\"contained\"\r\n                  color={props.filter === 'active' ? 'secondary' : 'primary'}\r\n                  onClick={buttonValue}>active</Button>\r\n          <Button variant=\"contained\"\r\n                  color={props.filter === 'completed' ? 'secondary' : 'primary'}\r\n                  onClick={buttonValue}>completed</Button>\r\n        </List> </Paper>\r\n  )\r\n})\r\nexport default TodoList;\r\n\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../state/store';\r\nimport {setError} from '../../reducers/app-reducer';\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport const ErrorSnackbar = () => {\r\n  // const [open, setOpen] = React.useState(true)\r\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n  const dispatch = useDispatch()\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) =>\r\n      dispatch(setError(null))\r\n  // debugger\r\n\r\n  // if (reason === 'clickaway') {\r\n  //   setOpen(false)\r\n  //   return\r\n  // }\r\n  // setOpen(false)\r\n\r\n\r\n  return (\r\n      <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\">\r\n          {error}\r\n        </Alert>\r\n      </Snackbar>\r\n  )\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport TodoList from '../../Components/todo-list/TodoList';\r\nimport {AddItemForm} from '../../Components/add-item-form/AddItemForm';\r\nimport {\r\n  AppBar,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  IconButton,\r\n  LinearProgress,\r\n  Paper,\r\n  Toolbar,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n  addTodoList,\r\n  changeFilterTodolistAC,\r\n  changeTitleTodolistAC,\r\n  fetchTodoListsThunk,\r\n  FilterValuesType,\r\n  TodolistDomainType\r\n} from '../../reducers/tl-reducer';\r\nimport {changeTaskTitleAC, removeTaskAC, setTask, updateStatusTask} from '../../reducers/task-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../state/store';\r\nimport {TaskStatuses, TaskType} from '../../api/api';\r\nimport {AppStateType} from '../../reducers/app-reducer';\r\nimport {ErrorSnackbar} from '../../Components/error-snackbars/ErrorSnackbar';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport {AuthStateType, logOut} from '../../reducers/auth-reducer';\r\n\r\nexport type TasksStateType = { [key: string]: Array<TaskType> }\r\n\r\nexport const Dashboard = () => {\r\n  const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todoLists)\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n  const {status} = useSelector<AppRootStateType, AppStateType>(state => state.app)\r\n  const {isLoggedIn,isInitialized} = useSelector<AppRootStateType, AuthStateType>(state => state.auth)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTodoListsThunk())\r\n    if (!isLoggedIn) {\r\n      return\r\n    }\r\n  }, [dispatch,isLoggedIn])\r\n\r\n  const changeTodoListNewTitle = useCallback((todolistId: string, title: string) => {\r\n    dispatch(changeTitleTodolistAC(todolistId, title))\r\n  }, [dispatch])\r\n\r\n\r\n  const addTask = useCallback((title: string, todoListId: string): void => {\r\n    dispatch(setTask(title, todoListId))\r\n  }, [dispatch])\r\n  const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string): void => {\r\n    dispatch(updateStatusTask(todolistId, id, status))\r\n  }, [dispatch])\r\n  const changeTaskTitle = useCallback((id: string, newTitle: string, todoListId: string): void => {\r\n    dispatch(changeTaskTitleAC(id, todoListId, newTitle))\r\n  }, [dispatch])\r\n  const removeTask = useCallback((id: string, todoListId: string) => {\r\n    dispatch(removeTaskAC(id, todoListId))\r\n  }, [dispatch])\r\n  const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n    dispatch(changeFilterTodolistAC(todolistId, value))\r\n  }, [dispatch])\r\n  const addTodoListClick = useCallback((title: string) => {\r\n    dispatch(addTodoList(title))\r\n  }, [dispatch])\r\n\r\n  const handleLogOut = () => {\r\n   dispatch(logOut())\r\n    // dispatch(setIsLoggedIn(false))//todo вылогирование\r\n  }\r\n\r\n  if (!isLoggedIn) {\r\n    return <Redirect to={'/login'}/>\r\n  }\r\n  return (\r\n      <div className=\"App\">\r\n        <ErrorSnackbar/>\r\n        <AppBar position=\"static\">\r\n          {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n              <Menu/>\r\n            </IconButton>\r\n            <Typography variant=\"h3\">\r\n              Todo\r\n            </Typography>\r\n            {isLoggedIn && <Button onClick={handleLogOut} color=\"inherit\"><NavLink to=\"/login\">Log out</NavLink></Button>}\r\n            {/*<Button onClick={handleLogOut} color=\"inherit\"><NavLink to=\"/login\">Login</NavLink></Button>*/}\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Container fixed>\r\n          <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodoListClick}/>\r\n          </Grid>\r\n          <Grid container spacing={10}>\r\n            {\r\n              todoLists.map((t) => {\r\n                let tasksForTodoList = tasks[t.id]\r\n                return (\r\n                    <Grid item key={t.id}>\r\n                      <Paper>\r\n                        <TodoList\r\n                            id={t.id}\r\n                            title={t.title}\r\n                            filter={t.filter}\r\n                            enentityStatus={t.entityStatus}\r\n                            addTask={addTask}\r\n                            remove={removeTask}\r\n                            tasks={tasksForTodoList}\r\n                            changeFilter={changeFilter}\r\n                            changeTaskStatus={changeStatus}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodoListNewTitle={changeTodoListNewTitle}\r\n                        />\r\n                      </Paper>\r\n                    </Grid>\r\n                )\r\n              })\r\n            }\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n  )\r\n}\r\n\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport {Login} from '../../pages/login/Login';\r\nimport NotFound from '../../pages/not-found/not-found';\r\nimport {Dashboard} from '../../pages/dashboard/Dashboard'\r\nimport {AuthStateType, initializeApp} from '../../reducers/auth-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {CircularProgress} from '@material-ui/core';\r\nimport {AppRootStateType} from '../../state/store';\r\n\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    dispatch(initializeApp())\r\n  }, [])\r\n  const {isInitialized} = useSelector<AppRootStateType, AuthStateType>(state => state.auth)\r\n  if (!isInitialized) {\r\n    return <div\r\n        style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n      <CircularProgress/>\r\n    </div>\r\n  }\r\n  return (\r\n      <Switch>\r\n        <Route exact path={'/'} render={() => <Dashboard/>}/>\r\n        <Route path={'/login'} render={() => <Login/>}/>\r\n        <Route render={() => <NotFound/>}/>\r\n      </Switch>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store'\r\nimport App from './Components/app/App';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n   <HashRouter>\r\n      <App/>\r\n   </HashRouter>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}
{"version":3,"sources":["api/api.ts","Components/add-item-form/AddItemForm.tsx","Components/editable-span/EditableSpan.tsx","constants.ts","reducers/task-reducer.ts","Components/todo-list/Task.tsx","reducers/tl-reducer.ts","Components/todo-list/TodoList.tsx","Components/app-withReducer/AppWithReducers.tsx","state/store.ts","index.tsx","Components/todo-list/todoList.module.css"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","valueTodo","setValueTodo","error","setError","console","log","TextField","value","onChange","event","target","onKeyPress","trim","charCode","addItem","helperText","label","Boolean","onBlur","IconButton","onClick","AddBox","EditableSpan","title","setTitle","editMode","setEditMode","e","currentTarget","autoFocus","onDoubleClick","ACTIONS_TYPE","instance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","then","res","data","post","titleId","delete","put","todoListId","taskId","initialState","removeTaskAC","todolistId","id","type","REMOVE_TASK","fetchTaskThunk","todoId","dispatch","task","SET_TASK","payload","setTaskAC","items","setTask","todoID","item","ADD_TASK","updateStatusTask","status","getState","currentTask","tasks","find","t","model","description","priority","startDate","deadline","CHANGE_STATUS_TASK","changeTaskStatusAC","Task","useDispatch","onChangeCheckbox","useCallback","newIsDoneValue","checked","changeTaskStatus","Completed","New","removeHandler","onChangeTitleHandler","newValue","changeTaskTitle","ListItem","key","className","s","done","ListItemIcon","Checkbox","color","ListItemText","Delete","v1","changeTitleTodolistAC","CHANGE_TITLE_TODOLIST","fetchTodoListsThunk","todoLists","SET_TODOS","setRemoveTodoList","REMOVE_TODOLIST","addTodoList","ADD_TODOLIST","addTodolistAC","TodoList","useEffect","tasksForTodoList","filter","buttonValue","textContent","changeFilter","changeTodoListNewTitle","updateTodoList","addTask","map","Paper","List","Button","variant","AppWithReducers","useSelector","state","changeStatus","newTitle","CHANGE_TITLE_TASK","changeTaskTitleAC","removeTask","CHANGE_FILTER_TODOLIST","changeFilterTodolistAC","addTodoListClick","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","remove","rootReducer","combineReducers","action","copyState","stateCopy","forEach","tl","todolistTask","newTask","newTasks","todolistTasks","newTasksArray","el","addedDate","order","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.9750386b.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4\r\n}\r\nexport type TaskType = {\r\n  description: string\r\n  title: string\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n  id: string\r\n  todoListId: string\r\n  order: number\r\n  addedDate: string\r\n}\r\nexport type TodolistType = {\r\n  id: string\r\n  title: string\r\n  addedDate: string\r\n  order: number\r\n}\r\nexport type UpdateTaskModelType = {\r\n  title: string\r\n  description: string\r\n  status: number\r\n  priority: number\r\n  startDate: string\r\n  deadline: string\r\n}\r\ntype ResponseType<T> = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  data: T\r\n}\r\ntype TasksResponse = {\r\n  error: string | null\r\n  totalCount: number\r\n  items: Array<TaskType>\r\n}\r\ntype UpdateTaskType = {\r\n  title: string\r\n  description: string\r\n  status: number\r\n  priority: number\r\n  startDate: string\r\n  deadline: string\r\n}\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': '69c9d2d3-e5a4-4bb9-9356-a9517225e2b4'\r\n  }\r\n})\r\n\r\nexport const todoListsAPI = {\r\n  getTodoLists() {\r\n    return instance.get<Array<TodolistType>>('todo-lists').then(res => res.data)\r\n  },\r\n  createTodoLists(title: string) {\r\n    return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title}).then(res => res.data)\r\n  },\r\n  deleteTodoLists(titleId: string) {\r\n    return instance.delete<ResponseType<{}>>(`todo-lists/${titleId}`).then(res => res.data)\r\n  },\r\n  updateTodoLists(titleId: string, title: string) {\r\n    return instance.put<ResponseType<{}>>(`todo-lists/${titleId}`, {title}).then(res => res.data)\r\n  },\r\n  getTasks(titleId: string) {\r\n    return instance.get<TasksResponse>(`todo-lists/${titleId}/tasks`).then(res => res.data)\r\n  },\r\n  deleteTask(todoListId: string, taskId: string) {\r\n    return instance.delete<TasksResponse>(`todo-lists/${todoListId}/tasks/${taskId}`).then(res => res.data)\r\n  },\r\n  createTask(todoListId: string, title: string) {\r\n    return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todoListId}/tasks`, {title}).then(res => res.data)\r\n  },\r\n  updateTask(todoListId: string, taskId: string, title: UpdateTaskModelType) {\r\n    return instance.put<UpdateTaskType>(`todo-lists/${todoListId}/tasks/${taskId}`, {title}).then(res => res.data)\r\n  }\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormType = {\r\n  addItem: (value: string) => void\r\n}\r\nexport const AddItemForm = React.memo( (props: AddItemFormType) => {\r\n  const [valueTodo, setValueTodo] = useState('')\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  console.log('AddItemForm click')\r\n\r\n  const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setValueTodo(event.target.value)\r\n    setError(null)\r\n  }\r\n  const onClickButtonAdd = () => {\r\n    if (valueTodo.trim()) {\r\n      props.addItem(valueTodo)\r\n      setValueTodo('')\r\n    } else {\r\n      setError('Error write name!')\r\n    }\r\n  }\r\n\r\n  const onKeyPressHandler = (event: any): void => {//нужно исправить!!!!!\r\n    if(error !== null){\r\n          setError(null);\r\n    }\r\n    const value = valueTodo.trim();\r\n    if (event.charCode === 13 && value !== '') {\r\n      props.addItem(value)\r\n      setValueTodo('')\r\n    } else {\r\n      setError('Error write name!')\r\n    }\r\n  }\r\n\r\n  return (\r\n      <div>\r\n        <TextField value={valueTodo}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   helperText={error && 'Write title'}\r\n                   label={\"Title\"}\r\n                   error={Boolean(error)}\r\n                   onBlur={() => {\r\n                     setError(null)\r\n                   }}\r\n        />\r\n        <IconButton onClick={onClickButtonAdd}>\r\n          <AddBox/>\r\n        </IconButton>\r\n      </div>\r\n  )\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpanTypeProps = {\r\n  title: string\r\nonChange:(value:string)=>void\r\n}\r\nexport const EditableSpan = React.memo((props: EditableSpanTypeProps) => {\r\n  const [title, setTitle] = useState('')\r\n  const [editMode, setEditMode] = useState(false)\r\n  const activateEditMode = () => {\r\n    setEditMode(true)\r\n    setTitle(props.title)\r\n  }\r\n  const activateViewMode = () => {\r\n    props.onChange(title)\r\n    setEditMode(false)\r\n  }\r\n  const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n  return (editMode\r\n          ? <TextField onChange={onChangeTitleHandler} onBlur={activateViewMode} value={title} autoFocus/>\r\n          : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n  )\r\n})\r\n","\r\nexport enum ACTIONS_TYPE {\r\n  ADD_TODOLIST = 'ADD_TODOLIST',\r\n  REMOVE_TODOLIST = 'REMOVE_TODOLIST',\r\n  CHANGE_FILTER_TODOLIST = 'CHANGE_FILTER_TODOLIST',\r\n  CHANGE_TITLE_TODOLIST = 'CHANGE_TITLE_TODOLIST',\r\n  REMOVE_TASK = 'REMOVE_TASK',\r\n  ADD_TASK = 'ADD_TASK',\r\n  CHANGE_STATUS_TASK = 'CHANGE_STATUS_TASK',\r\n  CHANGE_TITLE_TASK = 'CHANGE_TITLE_TASK',\r\n  SET_TODOS = 'SET_TODOS',\r\n  SET_TASK = 'SET_TASK',\r\n}\r\n","import {addTodolistAC, removeTodolistAC, setTodoListsAC} from './tl-reducer';\r\nimport {ACTIONS_TYPE} from '../constants';\r\nimport {TaskStatuses, TaskType, todoListsAPI, UpdateTaskModelType} from '../api/api';\r\nimport {AppRootStateType, AppThunk} from '../state/store';\r\nimport {TasksStateType} from '../Components/app-withReducer/AppWithReducers';\r\n\r\n\r\nexport type TaskActionType =\r\n    ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof setTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof setTodoListsAC>\r\n\r\nconst initialState: TasksStateType = {}\r\nexport const tasksReducer = (state = initialState, action: TaskActionType): TasksStateType => {\r\n  switch (action.type) {\r\n    case ACTIONS_TYPE.SET_TASK: {\r\n      const copyState = {...state}\r\n      copyState[action.payload.todoId] = action.payload.task\r\n      return copyState\r\n    }\r\n    case ACTIONS_TYPE.SET_TODOS: {\r\n      const stateCopy = {...state}\r\n      action.payload.forEach((tl) => {\r\n        stateCopy[tl.id] = []\r\n      })\r\n      return stateCopy\r\n    }\r\n    case ACTIONS_TYPE.REMOVE_TASK: {\r\n      const copyState = {...state}\r\n      const todolistTask = state[action.todolistId]\r\n      copyState[action.todolistId] = todolistTask.filter(t => t.id !== action.id)\r\n      return copyState\r\n    }\r\n    case ACTIONS_TYPE.ADD_TASK: {\r\n      const stateCopy = {...state}\r\n      const newTask = action.payload\r\n      const tasks = stateCopy[action.payload.todoListId];\r\n      const newTasks = [newTask, ...tasks];\r\n      stateCopy[action.payload.todoListId] = newTasks;\r\n      return stateCopy;\r\n    }\r\n    case ACTIONS_TYPE.CHANGE_STATUS_TASK: {\r\n      let todolistTasks = state[action.todolistId];\r\n      debugger\r\n      let newTasksArray:Array<TaskType> = todolistTasks\r\n          .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n\r\n      state[action.todolistId] = newTasksArray;\r\n      return ({...state});\r\n    }\r\n\r\n    case ACTIONS_TYPE.CHANGE_TITLE_TASK:\r\n      return {\r\n        ...state, [action.todolistId]: state[action.todolistId]\r\n            .map(el => el.id === action.id\r\n                ? {...el, title: action.title}\r\n                : {...el})\r\n\r\n      }\r\n    case ACTIONS_TYPE.ADD_TODOLIST: {\r\n      return {...state, [action.todolistId]: []}\r\n    }\r\n    case ACTIONS_TYPE.REMOVE_TODOLIST: {\r\n      const copyState = {...state}\r\n      delete copyState[action.id]\r\n      return copyState\r\n    }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const removeTaskAC = (todolistId: string, id: string) => ({\r\n  type: ACTIONS_TYPE.REMOVE_TASK,\r\n  id,\r\n  todolistId\r\n}) as const\r\nexport const addTaskAC = (task: TaskType) => ({\r\n  type: ACTIONS_TYPE.ADD_TASK,payload:task\r\n}) as const\r\nexport const changeTaskStatusAC = (status: TaskStatuses, todolistId: string, taskId: string,) => ({\r\n  type: ACTIONS_TYPE.CHANGE_STATUS_TASK\r\n    , status, todolistId, taskId\r\n}) as const\r\nexport const changeTaskTitleAC = (id: string, title: string, todolistId: string,) => ({\r\n  type: ACTIONS_TYPE.CHANGE_TITLE_TASK,\r\n  id,\r\n  title,\r\n  todolistId\r\n}) as const\r\nexport const setTaskAC = (task: Array<TaskType>, todoId: string) => {\r\n  return {type: ACTIONS_TYPE.SET_TASK, payload: {task, todoId}} as const\r\n}\r\n\r\n\r\nexport const fetchTaskThunk = (todoId: string): AppThunk => (dispatch) => {\r\n  debugger\r\n  todoListsAPI.getTasks(todoId).then((data) => dispatch(setTaskAC(data.items, todoId)))\r\n}\r\nexport const setRemoveTask = (todoID: string, taskId: string): AppThunk => (dispatch) => {\r\n  todoListsAPI.deleteTask(todoID, taskId)\r\n      .then((res) => {\r\n        dispatch(removeTaskAC(todoID, taskId))\r\n      })\r\n}\r\nexport const setTask = (todoID: string, title: string): AppThunk => (dispatch) => {\r\n  todoListsAPI.createTask(todoID, title)\r\n      .then((res) => {\r\n        dispatch(addTaskAC((res.data.item)))\r\n      })\r\n}\r\nexport const updateStatusTask = (todoID: string, taskId: string, status: TaskStatuses): AppThunk => (dispatch, getState: () => AppRootStateType) => {\r\n  const state = getState()\r\n  const allAppTasks = state.tasks\r\n  const forCurrentTodoID = allAppTasks[todoID]\r\n  const currentTask = forCurrentTodoID.find((t) => t.id === taskId)\r\n\r\n  if (currentTask) {\r\n    const model: UpdateTaskModelType = {\r\n      title: currentTask.title,\r\n      description: currentTask.description,\r\n      status: status,\r\n      priority: currentTask.priority,\r\n      startDate: currentTask.startDate,\r\n      deadline: currentTask.deadline,\r\n    }\r\n    todoListsAPI.updateTask(todoID, taskId, model).then(res => dispatch(changeTaskStatusAC(status, todoID, taskId)))\r\n  }\r\n}\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton, ListItem, ListItemIcon, ListItemText} from '@material-ui/core';\r\nimport s from './todoList.module.css';\r\nimport {EditableSpan} from '../editable-span/EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from '../../api/api';\r\nimport {useDispatch} from 'react-redux';\r\nimport {setRemoveTask} from '../../reducers/task-reducer';\r\n\r\nexport type TaskPropsType = {\r\n  task: TaskType\r\n  todoListId: string\r\n  // remove: (id: string, todoListId: string) => void\r\n  changeTaskTitle: (id: string, newValue: string, todoListId: string) => void\r\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const onChangeCheckbox = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    let newIsDoneValue = e.currentTarget.checked\r\n    props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId)\r\n  }, [props.task.id, props.todoListId]);\r\n\r\n  const removeHandler = useCallback(() => dispatch(setRemoveTask(props.todoListId, props.task.id)), [props.todoListId, props.task.id]);\r\n\r\n  const onChangeTitleHandler = useCallback((newValue: string) => {\r\n    props.changeTaskTitle(props.task.id, newValue, props.todoListId)\r\n  }, [props.task.id, props.todoListId]);\r\n\r\n  return (\r\n      <ListItem key={props.task.id} className={props.task.status === TaskStatuses.Completed ? s.done : ''}>\r\n        <ListItemIcon>\r\n          <Checkbox color={'primary'}\r\n                    checked={props.task.status === TaskStatuses.Completed}\r\n                    onChange={onChangeCheckbox}/>\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          <EditableSpan title={props.task.title} onChange={onChangeTitleHandler}/>\r\n        </ListItemText>\r\n        <IconButton onClick={removeHandler}>\r\n          <Delete/>\r\n        </IconButton>\r\n      </ListItem>\r\n  )\r\n})\r\n","import {v1} from 'uuid';\r\nimport {ACTIONS_TYPE} from '../constants';\r\nimport {AppThunk} from '../state/store';\r\nimport {todoListsAPI, TodolistType} from '../api/api';\r\n\r\nexport type TodoListActionType =\r\n    ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof setTodoListsAC>\r\n    | ReturnType<typeof changeFilterTodolistAC>\r\n    | ReturnType<typeof changeTitleTodolistAC>\r\n\r\nexport const todoListID1 = v1() // original id\r\nexport const todoListID2 = v1()\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n  filter: FilterValuesType\r\n}\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todoListReducer = (state = initialState, action: TodoListActionType): Array<TodolistDomainType> => {\r\n  switch (action.type) {\r\n    case ACTIONS_TYPE.ADD_TODOLIST: {\r\n        return [{\r\n          id: action.todolistId,\r\n          title: action.title,\r\n          filter: 'all',\r\n          addedDate: '',\r\n          order: 0 // порядок листа в очереди\r\n        }, ...state]\r\n      }\r\n    case ACTIONS_TYPE.REMOVE_TODOLIST:\r\n      return state.filter((item) => item.id !== action.id)\r\n    case ACTIONS_TYPE.CHANGE_FILTER_TODOLIST:\r\n      return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\r\n    case ACTIONS_TYPE.CHANGE_TITLE_TODOLIST:\r\n      return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl)\r\n    case ACTIONS_TYPE.SET_TODOS: {\r\n      return action.payload.map((tl) => ({...tl, filter: 'all'}))\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string) => ({type: ACTIONS_TYPE.REMOVE_TODOLIST, id: todolistId}) as const\r\nexport const addTodolistAC = (title: string) => ({type: ACTIONS_TYPE.ADD_TODOLIST, title, todolistId: v1()}) as const\r\nexport const changeFilterTodolistAC = (todolistId: string, filter: FilterValuesType) => ({\r\n  type: ACTIONS_TYPE.CHANGE_FILTER_TODOLIST,\r\n  todolistId,\r\n  filter\r\n}) as const\r\nexport const changeTitleTodolistAC = (todolistId: string, title: string) => ({\r\n  type: ACTIONS_TYPE.CHANGE_TITLE_TODOLIST,\r\n  todolistId,\r\n  title\r\n}) as const\r\nexport const setTodoListsAC = (todoLists: Array<TodolistType>) => ({type: ACTIONS_TYPE.SET_TODOS, payload: todoLists} ) as const\r\n\r\n\r\nexport const fetchTodoListsThunk = (): AppThunk =>  (dispatch) => {\r\n  todoListsAPI.getTodoLists()\r\n      .then((res) => {\r\n        dispatch(setTodoListsAC(res))\r\n      })\r\n}\r\nexport const setRemoveTodoList = (todoID: string): AppThunk => (dispatch) => {\r\n  todoListsAPI.deleteTodoLists(todoID)\r\n      .then((res) => {\r\n        dispatch(removeTodolistAC(todoID))\r\n      })\r\n}\r\nexport const addTodoList = (title: string): AppThunk => (dispatch) => {\r\n  todoListsAPI.createTodoLists(title)\r\n      .then((res) => {\r\n        dispatch(addTodolistAC(title))\r\n      })\r\n}\r\nexport const updateTodoList = (todoID: string, title: string): AppThunk => (dispatch) => {\r\n  todoListsAPI.updateTodoLists(todoID, title)\r\n      .then((res) => {\r\n        dispatch(changeTitleTodolistAC(todoID, title))\r\n      })\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from '../add-item-form/AddItemForm';\r\nimport {EditableSpan} from '../editable-span/EditableSpan';\r\nimport {Button, IconButton, List, Paper} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './Task';\r\nimport {v1} from 'uuid';\r\nimport {TaskStatuses, TaskType} from '../../api/api';\r\nimport {useDispatch} from 'react-redux';\r\nimport {FilterValuesType, setRemoveTodoList, updateTodoList} from '../../reducers/tl-reducer';\r\nimport {fetchTaskThunk, setTask} from '../../reducers/task-reducer';\r\n\r\ntype TodoListPropsType = {\r\n  id: string\r\n  title: string\r\n  tasks: Array<TaskType>\r\n  filter: FilterValuesType\r\n  // removeTodoList: (todoListID: string) => void\r\n  remove: (id: string, todoListId: string) => void\r\n  addTask: (value: string, todoListId: string) => void\r\n  changeTodoListNewTitle: (id: string, newTitle: string) => void\r\n  changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n  changeTaskTitle: (id: string, newValue: string, todoListId: string) => void\r\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n}\r\n\r\nconst TodoList = React.memo((props: TodoListPropsType) => {\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(()=>{\r\n    dispatch(fetchTaskThunk(props.id))\r\n  },[])\r\n\r\n\r\n  let tasksForTodoList = props.tasks\r\n  if (props.filter === 'active') {\r\n    tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n  }\r\n  if (props.filter === 'completed') {\r\n    tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n  }\r\n\r\n  const buttonValue = useCallback((event: any) => {\r\n    console.log(event.currentTarget.textContent)\r\n    props.changeFilter(event.currentTarget.textContent, props.id)\r\n  }, [props])\r\n\r\n  const changeTodoListNewTitle =  useCallback((title: string) => {\r\n    dispatch(updateTodoList(props.id, title))\r\n  }, [props.id, props.changeTodoListNewTitle])\r\n\r\n  const addTask = useCallback((title: string) => {\r\n    dispatch(setTask(props.id, title))\r\n  }, [props.addTask, props.id])\r\n\r\n  const removeTodolist = () => {\r\n    dispatch(setRemoveTodoList(props.id))\r\n  }\r\n\r\n  const tasks = tasksForTodoList.map(task => <Task\r\n      key={v1()}\r\n      task={task}\r\n      // remove={props.remove}\r\n      todoListId={props.id}\r\n      changeTaskStatus={props.changeTaskStatus}\r\n      changeTaskTitle={props.changeTaskTitle}\r\n  />)\r\n  return (\r\n      <Paper>\r\n        <List>\r\n          <h3>\r\n            <EditableSpan title={props.title} onChange={changeTodoListNewTitle}/>\r\n            <IconButton onClick={removeTodolist}><Delete/></IconButton>\r\n          </h3>\r\n          <AddItemForm addItem={addTask}/>\r\n          <ul>\r\n            {tasks}\r\n          </ul>\r\n          <Button variant=\"contained\"\r\n                  color={props.filter === 'all' ? 'secondary' : 'primary'}\r\n                  onClick={buttonValue}>all</Button>\r\n          <Button variant=\"contained\"\r\n                  color={props.filter === 'active' ? 'secondary' : 'primary'}\r\n                  onClick={buttonValue}>active</Button>\r\n          <Button variant=\"contained\"\r\n                  color={props.filter === 'completed' ? 'secondary' : 'primary'}\r\n                  onClick={buttonValue}>completed</Button>\r\n        </List> </Paper>\r\n  )\r\n})\r\nexport default TodoList;\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport TodoList from '../todo-list/TodoList';\r\nimport {AddItemForm} from '../add-item-form/AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n  addTodoList, changeFilterTodolistAC,\r\n  changeTitleTodolistAC,\r\n  fetchTodoListsThunk,\r\n  FilterValuesType,\r\n  removeTodolistAC,\r\n  TodolistDomainType\r\n} from '../../reducers/tl-reducer';\r\nimport {changeTaskTitleAC, removeTaskAC, setTask, updateStatusTask} from '../../reducers/task-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../state/store';\r\nimport {TaskStatuses, TaskType} from '../../api/api';\r\n\r\nexport type TasksStateType = {  [key: string]: Array<TaskType>}\r\n\r\nexport const AppWithReducers = () => {\r\n\r\n  const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todoLists)\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n  const dispatch = useDispatch()\r\n\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTodoListsThunk())\r\n  }, [dispatch])\r\n\r\n  const changeTodoListNewTitle = useCallback((todolistId: string, title: string) => {\r\n    dispatch(changeTitleTodolistAC(todolistId, title))\r\n  }, [dispatch])\r\n  const addTask = useCallback((title: string, todoListId: string): void => {\r\n    dispatch(setTask(title, todoListId))\r\n  }, [dispatch])\r\n  const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string): void => {\r\n    dispatch(updateStatusTask(todolistId, id, status))\r\n  }, [dispatch])\r\n  const changeTaskTitle = useCallback((id: string, newTitle: string, todoListId: string): void => {\r\n    dispatch(changeTaskTitleAC(id, todoListId, newTitle))\r\n  }, [dispatch])\r\n  const removeTask = useCallback((id: string, todoListId: string) => {\r\n    dispatch(removeTaskAC(id, todoListId))\r\n  }, [dispatch])\r\n  const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n    dispatch(changeFilterTodolistAC(todolistId, value))\r\n  }, [dispatch])\r\n  // const removeTodoList = useCallback((todoListID: string) => {\r\n  //   dispatch(removeTodolistAC(todoListID))\r\n  // }, [dispatch])\r\n  const addTodoListClick = useCallback((title: string) => {\r\n    dispatch(addTodoList(title))\r\n  }, [dispatch])\r\n\r\n\r\n  return (\r\n      <div className=\"App\">\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n              <Menu/>\r\n            </IconButton>\r\n            <Typography variant=\"h3\">\r\n              Todo\r\n            </Typography>\r\n            <Button color=\"inherit\">Login</Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Container fixed>\r\n\r\n          <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodoListClick}/>\r\n          </Grid>\r\n          <Grid container spacing={10}>\r\n            {\r\n              todoLists.map((t) => {\r\n                let tasksForTodoList = tasks[t.id]\r\n\r\n                return (\r\n                    <Grid item key={t.id}>\r\n                      <Paper>\r\n                        <TodoList\r\n                            id={t.id}\r\n                            title={t.title}\r\n                            filter={t.filter}\r\n                            addTask={addTask}\r\n                            remove={removeTask}\r\n                            tasks={tasksForTodoList}\r\n                            changeFilter={changeFilter}\r\n                            changeTaskStatus={changeStatus}\r\n                            // removeTodoList={removeTodoList}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodoListNewTitle={changeTodoListNewTitle}\r\n                        />\r\n                      </Paper>\r\n                    </Grid>\r\n                )\r\n              })\r\n            }\r\n          </Grid>\r\n        </Container>\r\n\r\n      </div>\r\n  )\r\n}\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {TaskActionType, tasksReducer} from '../reducers/task-reducer';\r\nimport {TodoListActionType, todoListReducer} from '../reducers/tl-reducer';\r\nimport thunk, {ThunkAction} from 'redux-thunk';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todoLists: todoListReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// экшен для типизации санки сборка из всех экшенов из редюсоров\r\ntype ActionType = TodoListActionType | TaskActionType\r\n//типизация санок\r\nexport type AppThunk = ThunkAction<void, AppRootStateType, unknown, ActionType>\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {AppWithReducers} from './Components/app-withReducer/AppWithReducers';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store'\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <AppWithReducers/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"todoList_active__3oVN6\",\"done\":\"todoList_done__3zuU6\",\"error\":\"todoList_error__1Ckbf\",\"message_error\":\"todoList_message_error__2OJDR\"};"],"sourceRoot":""}